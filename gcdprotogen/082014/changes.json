--- protocol_old.json	Sun Sep  6 15:51:08 2015
+++ protocol.json	Sun Sep  6 15:56:50 2015
@@ -7,15 +7,12 @@
         "commands": [
             {
                 "name": "enable",
-                "description": "Enables inspector domain notifications."
+                "description": "Enables inspector domain notifications.",
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "disable",
                 "description": "Disables inspector domain notifications."
-            },
-            {
-                "name": "reset",
-                "description": "Resets all domains."
             }
         ],
         "events": [
@@ -69,7 +66,7 @@
             {
                 "id": "ResourceType",
                 "type": "string",
-                "enum": ["Document", "Stylesheet", "Image", "Media", "Font", "Script", "TextTrack", "XHR", "WebSocket", "Other"],
+                "enum": ["Document", "Stylesheet", "Image", "Media", "Font", "Script", "TextTrack", "XHR", "Fetch", "EventSource", "WebSocket", "Other"],
                 "description": "Resource type as it was perceived by the rendering engine."
             },
             {
@@ -115,33 +112,6 @@
                 "hidden": true
             },
             {
-                "id": "SearchMatch",
-                "type": "object",
-                "description": "Search match for resource.",
-                "properties": [
-                    { "name": "lineNumber", "type": "number", "description": "Line number in resource content." },
-                    { "name": "lineContent", "type": "string", "description": "Line with match content." }
-                ],
-                "hidden": true
-            },
-            {
-                "id": "Cookie",
-                "type": "object",
-                "description": "Cookie object",
-                "properties": [
-                    { "name": "name", "type": "string", "description": "Cookie name." },
-                    { "name": "value", "type": "string", "description": "Cookie value." },
-                    { "name": "domain", "type": "string", "description": "Cookie domain." },
-                    { "name": "path", "type": "string", "description": "Cookie path." },
-                    { "name": "expires", "type": "number", "description": "Cookie expires." },
-                    { "name": "size", "type": "integer", "description": "Cookie size." },
-                    { "name": "httpOnly", "type": "boolean", "description": "True if cookie is http-only." },
-                    { "name": "secure", "type": "boolean", "description": "True if cookie is secure." },
-                    { "name": "session", "type": "boolean", "description": "True in case of session cookie." }
-                ],
-                "hidden": true
-            },
-            {
                 "id": "ScriptIdentifier",
                 "type": "string",
                 "description": "Unique script identifier.",
@@ -159,73 +129,33 @@
                 "hidden": true
             },
             {
-                "id": "Quota",
-                "type": "object",
-                "description": "Quota information",
-                "properties": [
-                    { "name": "temporary", "type": "number", "description": "Quota for temporary storage shared among all security origins" },
-                    { "name": "persistent", "type": "number", "description": "Quota for persistent storage for the security origin." }
-                ],
-                "hidden": true
-            },
-            {
-                "id": "Usage",
-                "type": "object",
-                "description": "Usage information",
-                "properties": [
-                    { "name": "temporary", "type": "array", "items": { "$ref": "Page.UsageItem" }, "description": "Temporary storage usage." },
-                    { "name": "persistent", "type": "array", "items": { "$ref": "Page.UsageItem" }, "description": "Persistent storage usage." },
-                    { "name": "syncable", "type": "array", "items": { "$ref": "Page.UsageItem" }, "description": "Syncable storage." }
-                ],
-                "hidden": true
-            },
-            {
-                "id": "UsageItem",
-                "type": "object",
-                "description": "Usage information for a client and storage type",
-                "properties": [
-                    { "name": "id", "type": "string", "enum": ["filesystem", "database", "appcache", "indexeddatabase"], "description": "Item id." },
-                    { "name": "value", "type": "number", "description": "Item usage value." }
-                ],
-                "hidden": true
-            },
-            {
-                "id": "Viewport",
-                "type": "object",
-                "description": "Visible page viewport",
-                "properties": [
-                    { "name": "scrollX", "type": "number", "description": "X scroll offset in CSS pixels." },
-                    { "name": "scrollY", "type": "number", "description": "Y scroll offset in CSS pixels." },
-                    { "name": "contentsWidth", "type": "number", "description": "Contents width in CSS pixels." },
-                    { "name": "contentsHeight", "type": "number", "description": "Contents height in CSS pixels." },
-                    { "name": "pageScaleFactor", "type": "number", "description": "Page scale factor." }
-                ],
-                "hidden": true
-            },
-            {
                 "id": "ScreencastFrameMetadata",
                 "type": "object",
                 "description": "Screencast frame metadata",
                 "properties": [
-                    { "name": "deviceScaleFactor", "type": "number", "hidden": true, "description": "Device scale factor." },
-                    { "name": "viewport", "$ref": "DOM.Rect", "hidden": true, "description": "Viewport in CSS pixels." },
-                    { "name": "offsetTop", "type": "number", "hidden": true, "optional": true, "description": "Top offset in DIP." },
-                    { "name": "offsetBottom", "type": "number", "hidden": true, "optional": true, "description": "Bottom offset in DIP." },
+                    { "name": "offsetTop", "type": "number", "hidden": true, "description": "Top offset in DIP." },
                     { "name": "pageScaleFactor", "type": "number", "hidden": true, "description": "Page scale factor." },
-                    { "name": "pageScaleFactorMin", "type": "number", "hidden": true, "description": "Page scale factor min." },
-                    { "name": "pageScaleFactorMax", "type": "number", "hidden": true, "description": "Page scale factor max." },
                     { "name": "deviceWidth", "type": "number", "hidden": true, "description": "Device screen width in DIP." },
                     { "name": "deviceHeight", "type": "number", "hidden": true, "description": "Device screen height in DIP." },
                     { "name": "scrollOffsetX", "type": "number", "hidden": true, "description": "Position of horizontal scroll in CSS pixels." },
-                    { "name": "scrollOffsetY", "type": "number", "hidden": true, "description": "Position of vertical scroll in CSS pixels." }
+                    { "name": "scrollOffsetY", "type": "number", "hidden": true, "description": "Position of vertical scroll in CSS pixels." },
+                    { "name": "timestamp", "type": "number", "optional": true, "hidden": true, "description": "Frame swap timestamp." }
                 ],
                 "hidden": true
+            },
+            {
+                "id": "DialogType",
+                "description": "Javascript dialog type",
+                "type": "string",
+                "enum": ["alert", "confirm", "prompt", "beforeunload"],
+                "hidden": true
             }
         ],
         "commands": [
             {
                 "name": "enable",
-                "description": "Enables page domain notifications."
+                "description": "Enables page domain notifications.",
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "disable",
@@ -253,8 +183,7 @@
                 "name": "reload",
                 "parameters": [
                     { "name": "ignoreCache", "type": "boolean", "optional": true, "description": "If true, browser cache is ignored (as if the user pressed Shift+refresh)." },
-                    { "name": "scriptToEvaluateOnLoad", "type": "string", "optional": true, "description": "If set, the script will be injected into all frames of the inspected page after reload." },
-                    { "name": "scriptPreprocessor", "type": "string", "optional": true, "description": "Script body that should evaluate to function that will preprocess all the scripts before their compilation.", "hidden": true }
+                    { "name": "scriptToEvaluateOnLoad", "type": "string", "optional": true, "description": "If set, the script will be injected into all frames of the inspected page after reload." }
                 ],
                 "description": "Reloads given page optionally ignoring the cache.",
                 "handlers": ["browser", "renderer"]
@@ -293,10 +222,13 @@
             {
                 "name": "getCookies",
                 "returns": [
-                    { "name": "cookies", "type": "array", "items": { "$ref": "Cookie" }, "description": "Array of cookie objects." }
+                    { "name": "cookies", "type": "array", "items": { "$ref": "Network.Cookie" }, "description": "Array of cookie objects." }
                 ],
                 "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.",
-                "hidden": true
+                "handlers": ["browser"],
+                "async": true,
+                "hidden": true,
+                "redirect": "Network"
             },
             {
                 "name": "deleteCookie",
@@ -305,7 +237,10 @@
                     { "name": "url", "type": "string", "description": "URL to match cooke domain and path." }
                 ],
                 "description": "Deletes browser cookie with given name, domain and path.",
-                "hidden": true
+                "handlers": ["browser"],
+                "async": true,
+                "hidden": true,
+                "redirect": "Network"
             },
             {
                 "name": "getResourceTree",
@@ -340,7 +275,7 @@
                     { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
                 ],
                 "returns": [
-                    { "name": "result", "type": "array", "items": { "$ref": "SearchMatch" }, "description": "List of search matches." }
+                    { "name": "result", "type": "array", "items": { "$ref": "Debugger.SearchMatch" }, "description": "List of search matches." }
                 ],
                 "hidden": true
             },
@@ -364,90 +299,39 @@
                     { "name": "fitWindow", "type": "boolean", "description": "Whether a view that exceeds the available browser window area should be scaled down to fit." },
                     { "name": "scale", "type": "number", "optional": true, "description": "Scale to apply to resulting view image. Ignored in |fitWindow| mode." },
                     { "name": "offsetX", "type": "number", "optional": true, "description": "X offset to shift resulting view image by. Ignored in |fitWindow| mode." },
-                    { "name": "offsetY", "type": "number", "optional": true, "description": "Y offset to shift resulting view image by. Ignored in |fitWindow| mode." }
+                    { "name": "offsetY", "type": "number", "optional": true, "description": "Y offset to shift resulting view image by. Ignored in |fitWindow| mode." },
+                    { "name": "screenWidth", "type": "integer", "optional": true, "description": "Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "screenHeight", "type": "integer", "optional": true, "description": "Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "positionX", "type": "integer", "optional": true, "description": "Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "positionY", "type": "integer", "optional": true, "description": "Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." }
                 ],
+                "handlers": ["browser"],
+                "redirect": "Emulation",
                 "hidden": true
             },
             {
                 "name": "clearDeviceMetricsOverride",
                 "description": "Clears the overriden device metrics.",
-                "hidden": true
-            },
-            {
-                "name": "resetScrollAndPageScaleFactor",
-                "description": "Requests that scroll offsets and page scale factor are reset to initial values.",
-                "hidden": true
-            },
-            {
-                "name": "setShowPaintRects",
-                "description": "Requests that backend shows paint rectangles",
-                "parameters": [
-                    { "name": "result", "type": "boolean", "description": "True for showing paint rectangles" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "setShowDebugBorders",
-                "description": "Requests that backend shows debug borders on layers",
-                "parameters": [
-                    { "name": "show", "type": "boolean", "description": "True for showing debug borders" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "setShowFPSCounter",
-                "description": "Requests that backend shows the FPS counter",
-                "parameters": [
-                    { "name": "show", "type": "boolean", "description": "True for showing the FPS counter" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "setContinuousPaintingEnabled",
-                "description": "Requests that backend enables continuous painting",
-                "parameters": [
-                    { "name": "enabled", "type": "boolean", "description": "True for enabling cointinuous painting" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "setShowScrollBottleneckRects",
-                "description": "Requests that backend shows scroll bottleneck rects",
-                "parameters": [
-                    { "name": "show", "type": "boolean", "description": "True for showing scroll bottleneck rects" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "getScriptExecutionStatus",
-                "description": "Determines if scripts can be executed in the page.",
-                "returns": [
-                    { "name": "result", "type": "string", "enum": ["allowed", "disabled", "forbidden"], "description": "Script execution status: \"allowed\" if scripts can be executed, \"disabled\" if script execution has been disabled through page settings, \"forbidden\" if script execution for the given page is not possible for other reasons." }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "setScriptExecutionDisabled",
-                "description": "Switches script execution in the page.",
-                "parameters": [
-                    { "name": "value", "type": "boolean", "description": "Whether script execution should be disabled in the page." }
-                ],
+                "handlers": ["browser"],
+                "redirect": "Emulation",
                 "hidden": true
             },
             {
                 "name": "setGeolocationOverride",
-                "description": "Overrides the Geolocation Position or Error.",
+                "description": "Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.",
                 "parameters": [
                     { "name": "latitude", "type": "number", "optional": true, "description": "Mock latitude"},
                     { "name": "longitude", "type": "number", "optional": true, "description": "Mock longitude"},
                     { "name": "accuracy", "type": "number", "optional": true, "description": "Mock accuracy"}
                 ],
-                "redirect": "Geolocation"
+                "redirect": "Emulation",
+                "handlers": ["browser"]
             },
             {
                 "name": "clearGeolocationOverride",
                 "description": "Clears the overriden Geolocation Position and Error.",
-                "redirect": "Geolocation"
+                "redirect": "Emulation",
+                "handlers": ["browser"]
             },
             {
                 "name": "setDeviceOrientationOverride",
@@ -469,21 +353,17 @@
             {
                 "name": "setTouchEmulationEnabled",
                 "parameters": [
-                    { "name": "enabled", "type": "boolean", "description": "Whether the touch event emulation should be enabled." }
+                    { "name": "enabled", "type": "boolean", "description": "Whether the touch event emulation should be enabled." },
+                    { "name": "configuration", "type": "string", "enum": ["mobile", "desktop"], "optional": true, "description": "Touch/gesture events configuration. Default: current platform." }
                 ],
                 "description": "Toggles mouse event-based touch event emulation.",
-                "hidden": true
-            },
-            {
-                "name": "setEmulatedMedia",
-                "parameters": [
-                    { "name": "media", "type": "string", "description": "Media type to emulate. Empty string disables the override." }
-                ],
-                "description": "Emulates the given media for CSS media queries.",
-                "hidden": true
+                "hidden": true,
+                "redirect": "Emulation",
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "captureScreenshot",
+                "async": true,
                 "description": "Capture page screenshot.",
                 "parameters": [],
                 "returns": [
@@ -511,12 +391,21 @@
                     { "name": "maxHeight", "type": "integer", "optional": true, "description": "Maximum screenshot height." }
                 ],
                 "hidden": true,
-                "handlers": ["browser"]
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "stopScreencast",
                 "description": "Stops sending each frame in the <code>screencastFrame</code>.",
                 "hidden": true,
+                "handlers": ["browser", "renderer"]
+            },
+            {
+                "name": "screencastFrameAck",
+                "description": "Acknowledges that a screencast frame has been received by the frontend.",
+                "parameters": [
+                    { "name": "frameNumber", "type": "integer", "description": "Frame number." }
+                ],
+                "hidden": true,
                 "handlers": ["browser"]
             },
             {
@@ -539,17 +428,21 @@
                 "hidden": true
             },
             {
-                "name": "queryUsageAndQuota",
+                "name": "setColorPickerEnabled",
                 "parameters": [
-                    { "name": "securityOrigin", "type": "string", "description": "Security origin quota and usage requested for" }
-                ],
-                "returns": [
-                    { "name": "quota", "$ref": "Quota", "description": "Quota for requested security origin." },
-                    { "name": "usage", "$ref": "Usage", "description": "Current usage for requested security origin." }
+                    { "name": "enabled", "type": "boolean", "description": "Shows / hides color picker" }
                 ],
-                "description": "Queries more detailed quota and usage data than Storage API provides.",
+                "description": "Shows / hides color picker",
                 "hidden": true,
                 "handlers": ["browser"]
+            },
+            {
+                "name": "setOverlayMessage",
+                "parameters": [
+                    { "name": "message", "type": "string", "optional": true, "description": "Overlay message to display when paused in debugger." }
+                ],
+                "hidden": true,
+                "description": "Sets overlay message."
             }
         ],
         "events": [
@@ -628,20 +521,16 @@
                 "name": "javascriptDialogOpening",
                 "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) is about to open.",
                 "parameters": [
-                    { "name": "message", "type": "string", "description": "Message that will be displayed by the dialog." }
+                    { "name": "message", "type": "string", "description": "Message that will be displayed by the dialog." },
+                    { "name": "type", "$ref": "DialogType", "description": "Dialog type." }
                 ],
                 "hidden": true
             },
             {
                 "name": "javascriptDialogClosed",
                 "description": "Fired when a JavaScript initiated dialog (alert, confirm, prompt, or onbeforeunload) has been closed.",
-                "hidden": true
-            },
-            {
-                "name": "scriptsEnabled",
-                "description": "Fired when the JavaScript is enabled/disabled on the page",
                 "parameters": [
-                    { "name": "isEnabled", "type": "boolean", "description": "Whether script execution is enabled or disabled on the page." }
+                    { "name": "result", "type": "boolean", "description": "Whether dialog was confirmed." }
                 ],
                 "hidden": true
             },
@@ -650,7 +539,8 @@
                 "description": "Compressed image data requested by the <code>startScreencast</code>.",
                 "parameters": [
                     { "name": "data", "type": "string", "description": "Base64-encoded compressed image." },
-                    { "name": "metadata", "$ref": "ScreencastFrameMetadata", "description": "Screencast frame metadata"}
+                    { "name": "metadata", "$ref": "ScreencastFrameMetadata", "description": "Screencast frame metadata."},
+                    { "name": "frameNumber", "type": "integer", "optional": true, "description": "Frame number."}
                 ],
                 "hidden": true,
                 "handlers": ["browser"]
@@ -665,96 +555,281 @@
                 "handlers": ["browser"]
             },
             {
-                "name": "viewportChanged",
-                "description": "Fired when a visible page viewport has changed.",
+                "name": "colorPicked",
+                "description": "Fired when a color has been picked.",
                 "parameters": [
-                    { "name": "viewport", "$ref": "Viewport", "description": "Viewport description." }
+                    { "name": "color", "$ref": "DOM.RGBA", "description": "RGBA of the picked color." }
                 ],
-                "hidden": true
-            }
-        ]
+                "hidden": true,
+                "handlers": ["browser"]
     },
     {
-        "domain": "Runtime",
-        "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.",
-        "types": [
-            {
-                "id": "RemoteObjectId",
-                "type": "string",
-                "description": "Unique object identifier."
+                "name": "interstitialShown",
+                "description": "Fired when interstitial page was shown",
+                "hidden": true,
+                "handlers": ["browser"]
             },
             {
-                "id": "RemoteObject",
-                "type": "object",
-                "description": "Mirror object referencing original JavaScript object.",
-                "properties": [
-                    { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." },
-                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
-                    { "name": "className", "type": "string", "optional": true, "description": "Object class (constructor) name. Specified for <code>object</code> type values only." },
-                    { "name": "value", "type": "any", "optional": true, "description": "Remote object value in case of primitive values or JSON values (if it was requested), or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0)." },
-                    { "name": "description", "type": "string", "optional": true, "description": "String representation of the object." },
-                    { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Unique object identifier (for non-primitive values)." },
-                    { "name": "preview", "$ref": "ObjectPreview", "optional": true, "description": "Preview containing abbreviated property values.", "hidden": true }
+                "name": "interstitialHidden",
+                "description": "Fired when interstitial page was hidden",
+                "hidden": true,
+                "handlers": ["browser"]
+            }
                 ]
             },
             {
-                "id": "ObjectPreview",
-                "type": "object",
+        "domain": "Rendering",
+        "description": "This domain allows to control rendering of the page.",
                 "hidden": true,
-                "description": "Object containing abbreviated remote object value.",
-                "properties": [
-                    { "name": "lossless", "type": "boolean", "description": "Determines whether preview is lossless (contains all information of the original object)." },
-                    { "name": "overflow", "type": "boolean", "description": "True iff some of the properties of the original did not fit." },
-                    { "name": "properties", "type": "array", "items": { "$ref": "PropertyPreview" }, "description": "List of the properties." }
+        "commands": [
+            {
+                "name": "setShowPaintRects",
+                "description": "Requests that backend shows paint rectangles",
+                "parameters": [
+                    { "name": "result", "type": "boolean", "description": "True for showing paint rectangles" }
                 ]
             },
             {
-                "id": "PropertyPreview",
-                "type": "object",
-                "hidden": true,
-                "properties": [
-                    { "name": "name", "type": "string", "description": "Property name." },
-                    { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol", "accessor"], "description": "Object type. Accessor means that the property itself is an accessor property." },
-                    { "name": "value", "type": "string", "optional": true, "description": "User-friendly property value string." },
-                    { "name": "valuePreview", "$ref": "ObjectPreview", "optional": true, "description": "Nested value preview." },
-                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date"], "description": "Object subtype hint. Specified for <code>object</code> type values only." }
+                "name": "setShowDebugBorders",
+                "description": "Requests that backend shows debug borders on layers",
+                "parameters": [
+                    { "name": "show", "type": "boolean", "description": "True for showing debug borders" }
                 ]
             },
             {
-                "id": "PropertyDescriptor",
-                "type": "object",
-                "description": "Object property descriptor.",
-                "properties": [
-                    { "name": "name", "type": "string", "description": "Property name or symbol description." },
-                    { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." },
-                    { "name": "writable", "type": "boolean", "optional": true, "description": "True if the value associated with the property may be changed (data descriptors only)." },
-                    { "name": "get", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)." },
-                    { "name": "set", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)." },
-                    { "name": "configurable", "type": "boolean", "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object." },
-                    { "name": "enumerable", "type": "boolean", "description": "True if this property shows up during enumeration of the properties on the corresponding object." },
-                    { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the evaluation." },
-                    { "name": "isOwn", "optional": true, "type": "boolean", "description": "True if the property is owned for the object.", "hidden": true },
-                    { "name": "symbol", "$ref": "RemoteObject", "optional": true, "description": "Property symbol object, if the property is of the <code>symbol</code> type.", "hidden": true }
+                "name": "setShowFPSCounter",
+                "description": "Requests that backend shows the FPS counter",
+                "parameters": [
+                    { "name": "show", "type": "boolean", "description": "True for showing the FPS counter" }
                 ]
             },
             {
-                "id": "InternalPropertyDescriptor",
-                "type": "object",
-                "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
-                "properties": [
-                    { "name": "name", "type": "string", "description": "Conventional property name." },
-                    { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." }
-                ],
-                "hidden": true
+                "name": "setShowScrollBottleneckRects",
+                "description": "Requests that backend shows scroll bottleneck rects",
+                "parameters": [
+                    { "name": "show", "type": "boolean", "description": "True for showing scroll bottleneck rects" }
+                ]
+            }
+        ]
             },
             {
-                "id": "CallArgument",
+        "domain": "Emulation",
+        "description": "This domain emulates different environments for the page.",
+        "hidden": true,
+        "types": [
+            {
+                "id": "Viewport",
                 "type": "object",
-                "description": "Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.",
+                "description": "Visible page viewport",
                 "properties": [
-                    { "name": "value", "type": "any", "optional": true, "description": "Primitive value, or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0)." },
-                    { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Remote object handle." },
-                    { "name": "type", "optional": true, "hidden": true, "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." }
+                    { "name": "scrollX", "type": "number", "description": "X scroll offset in CSS pixels." },
+                    { "name": "scrollY", "type": "number", "description": "Y scroll offset in CSS pixels." },
+                    { "name": "contentsWidth", "type": "number", "description": "Contents width in CSS pixels." },
+                    { "name": "contentsHeight", "type": "number", "description": "Contents height in CSS pixels." },
+                    { "name": "pageScaleFactor", "type": "number", "description": "Page scale factor." },
+                    { "name": "minimumPageScaleFactor", "type": "number", "description": "Minimum page scale factor." },
+                    { "name": "maximumPageScaleFactor", "type": "number", "description": "Maximum page scale factor." }
+                ]
+            }
+        ],
+        "commands": [
+            {
+                "name": "setDeviceMetricsOverride",
+                "description": "Overrides the values of device screen dimensions (window.screen.width, window.screen.height, window.innerWidth, window.innerHeight, and \"device-width\"/\"device-height\"-related CSS media query results).",
+                "parameters": [
+                    { "name": "width", "type": "integer", "description": "Overriding width value in pixels (minimum 0, maximum 10000000). 0 disables the override." },
+                    { "name": "height", "type": "integer", "description": "Overriding height value in pixels (minimum 0, maximum 10000000). 0 disables the override." },
+                    { "name": "deviceScaleFactor", "type": "number", "description": "Overriding device scale factor value. 0 disables the override." },
+                    { "name": "mobile", "type": "boolean", "description": "Whether to emulate mobile device. This includes viewport meta tag, overlay scrollbars, text autosizing and more." },
+                    { "name": "fitWindow", "type": "boolean", "description": "Whether a view that exceeds the available browser window area should be scaled down to fit." },
+                    { "name": "scale", "type": "number", "optional": true, "description": "Scale to apply to resulting view image. Ignored in |fitWindow| mode." },
+                    { "name": "offsetX", "type": "number", "optional": true, "description": "X offset to shift resulting view image by. Ignored in |fitWindow| mode." },
+                    { "name": "offsetY", "type": "number", "optional": true, "description": "Y offset to shift resulting view image by. Ignored in |fitWindow| mode." },
+                    { "name": "screenWidth", "type": "integer", "optional": true, "description": "Overriding screen width value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "screenHeight", "type": "integer", "optional": true, "description": "Overriding screen height value in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "positionX", "type": "integer", "optional": true, "description": "Overriding view X position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." },
+                    { "name": "positionY", "type": "integer", "optional": true, "description": "Overriding view Y position on screen in pixels (minimum 0, maximum 10000000). Only used for |mobile==true|." }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "clearDeviceMetricsOverride",
+                "description": "Clears the overriden device metrics.",
+                "handlers": ["browser"]
+            },
+            {
+                "name": "resetScrollAndPageScaleFactor",
+                "description": "Requests that scroll offsets and page scale factor are reset to initial values."
+            },
+            {
+                "name": "setPageScaleFactor",
+                "description": "Sets a specified page scale factor.",
+                "parameters": [
+                    { "name": "pageScaleFactor", "type": "number", "description": "Page scale factor." }
+                ]
+            },
+            {
+                "name": "setScriptExecutionDisabled",
+                "description": "Switches script execution in the page.",
+                "parameters": [
+                    { "name": "value", "type": "boolean", "description": "Whether script execution should be disabled in the page." }
+                ]
+            },
+            {
+                "name": "setGeolocationOverride",
+                "description": "Overrides the Geolocation Position or Error. Omitting any of the parameters emulates position unavailable.",
+                "parameters": [
+                    { "name": "latitude", "type": "number", "optional": true, "description": "Mock latitude"},
+                    { "name": "longitude", "type": "number", "optional": true, "description": "Mock longitude"},
+                    { "name": "accuracy", "type": "number", "optional": true, "description": "Mock accuracy"}
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "clearGeolocationOverride",
+                "description": "Clears the overriden Geolocation Position and Error.",
+                "handlers": ["browser"]
+            },
+            {
+                "name": "setTouchEmulationEnabled",
+                "parameters": [
+                    { "name": "enabled", "type": "boolean", "description": "Whether the touch event emulation should be enabled." },
+                    { "name": "configuration", "type": "string", "enum": ["mobile", "desktop"], "optional": true, "description": "Touch/gesture events configuration. Default: current platform." }
+                ],
+                "description": "Toggles mouse event-based touch event emulation.",
+                "handlers": ["browser", "renderer"]
+            },
+            {
+                "name": "setEmulatedMedia",
+                "parameters": [
+                    { "name": "media", "type": "string", "description": "Media type to emulate. Empty string disables the override." }
+                ],
+                "description": "Emulates the given media for CSS media queries."
+            },
+            {
+                "name": "canEmulate",
+                "description": "Tells whether emulation is supported.",
+                "returns": [
+                    { "name": "result", "type": "boolean", "description": "True if emulation is supported." }
+                ],
+                "handlers": ["browser"]
+            }
+        ],
+        "events": [
+            {
+                "name": "viewportChanged",
+                "description": "Fired when a visible page viewport has changed. Only fired when device metrics are overridden.",
+                "parameters": [
+                    { "name": "viewport", "$ref": "Viewport", "description": "Viewport description." }
+                ]
+            }
+        ]
+    },
+    {
+        "domain": "Runtime",
+        "description": "Runtime domain exposes JavaScript runtime by means of remote evaluation and mirror objects. Evaluation results are returned as mirror object that expose object type, string representation and unique identifier that can be used for further object reference. Original objects are maintained in memory unless they are either explicitly released or are released along with the other objects in their object group.",
+        "types": [
+            {
+                "id": "RemoteObjectId",
+                "type": "string",
+                "description": "Unique object identifier."
+            },
+            {
+                "id": "RemoteObject",
+                "type": "object",
+                "description": "Mirror object referencing original JavaScript object.",
+                "properties": [
+                    { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." },
+                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
+                    { "name": "className", "type": "string", "optional": true, "description": "Object class (constructor) name. Specified for <code>object</code> type values only." },
+                    { "name": "value", "type": "any", "optional": true, "description": "Remote object value in case of primitive values or JSON values (if it was requested), or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0)." },
+                    { "name": "description", "type": "string", "optional": true, "description": "String representation of the object." },
+                    { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Unique object identifier (for non-primitive values)." },
+                    { "name": "preview", "$ref": "ObjectPreview", "optional": true, "description": "Preview containing abbreviated property values. Specified for <code>object</code> type values only.", "hidden": true },
+                    { "name": "customPreview", "$ref": "CustomPreview", "optional": true, "hidden": true}
+                ]
+            },
+            {   "id": "CustomPreview",
+                "type": "object",
+                "hidden": true,
+                "properties": [
+                    { "name": "header", "type": "string"},
+                    { "name": "hasBody", "type": "boolean"},
+                    {"name": "formatterObjectId", "$ref": "RemoteObjectId"},
+                    {"name": "configObjectId", "$ref": "RemoteObjectId", "optional": true}
+                ]
+            },
+            {
+                "id": "ObjectPreview",
+                "type": "object",
+                "hidden": true,
+                "description": "Object containing abbreviated remote object value.",
+                "properties": [
+                    { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." },
+                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
+                    { "name": "description", "type": "string", "optional": true, "description": "String representation of the object." },
+                    { "name": "lossless", "type": "boolean", "description": "Determines whether preview is lossless (contains all information of the original object)." },
+                    { "name": "overflow", "type": "boolean", "description": "True iff some of the properties or entries of the original object did not fit." },
+                    { "name": "properties", "type": "array", "items": { "$ref": "PropertyPreview" }, "description": "List of the properties." },
+                    { "name": "entries", "type": "array", "items": { "$ref": "EntryPreview" }, "optional": true, "description": "List of the entries. Specified for <code>map</code> and <code>set</code> subtype values only." }
+                ]
+            },
+            {
+                "id": "PropertyPreview",
+                "type": "object",
+                "hidden": true,
+                "properties": [
+                    { "name": "name", "type": "string", "description": "Property name." },
+                    { "name": "type", "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol", "accessor"], "description": "Object type. Accessor means that the property itself is an accessor property." },
+                    { "name": "value", "type": "string", "optional": true, "description": "User-friendly property value string." },
+                    { "name": "valuePreview", "$ref": "ObjectPreview", "optional": true, "description": "Nested value preview." },
+                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date", "map", "set", "iterator", "generator", "error"], "description": "Object subtype hint. Specified for <code>object</code> type values only." }
+                ]
+            },
+            {
+                "id": "EntryPreview",
+                "type": "object",
+                "hidden": true,
+                "properties": [
+                    { "name": "key", "$ref": "ObjectPreview", "optional": true, "description": "Preview of the key. Specified for map-like collection entries." },
+                    { "name": "value", "$ref": "ObjectPreview", "description": "Preview of the value." }
+                ]
+            },
+            {
+                "id": "PropertyDescriptor",
+                "type": "object",
+                "description": "Object property descriptor.",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "Property name or symbol description." },
+                    { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." },
+                    { "name": "writable", "type": "boolean", "optional": true, "description": "True if the value associated with the property may be changed (data descriptors only)." },
+                    { "name": "get", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a getter for the property, or <code>undefined</code> if there is no getter (accessor descriptors only)." },
+                    { "name": "set", "$ref": "RemoteObject", "optional": true, "description": "A function which serves as a setter for the property, or <code>undefined</code> if there is no setter (accessor descriptors only)." },
+                    { "name": "configurable", "type": "boolean", "description": "True if the type of this property descriptor may be changed and if the property may be deleted from the corresponding object." },
+                    { "name": "enumerable", "type": "boolean", "description": "True if this property shows up during enumeration of the properties on the corresponding object." },
+                    { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the evaluation." },
+                    { "name": "isOwn", "optional": true, "type": "boolean", "description": "True if the property is owned for the object.", "hidden": true },
+                    { "name": "symbol", "$ref": "RemoteObject", "optional": true, "description": "Property symbol object, if the property is of the <code>symbol</code> type.", "hidden": true }
+                ]
+            },
+            {
+                "id": "InternalPropertyDescriptor",
+                "type": "object",
+                "description": "Object internal property descriptor. This property isn't normally visible in JavaScript code.",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "Conventional property name." },
+                    { "name": "value", "$ref": "RemoteObject", "optional": true, "description": "The value associated with the property." }
+                ],
+                "hidden": true
+            },
+            {
+                "id": "CallArgument",
+                "type": "object",
+                "description": "Represents function call argument. Either remote object id <code>objectId</code> or primitive <code>value</code> or neither of (for undefined) them should be specified.",
+                "properties": [
+                    { "name": "value", "type": "any", "optional": true, "description": "Primitive value, or description string if the value can not be JSON-stringified (like NaN, Infinity, -Infinity, -0)." },
+                    { "name": "objectId", "$ref": "RemoteObjectId", "optional": true, "description": "Remote object handle." },
+                    { "name": "type", "optional": true, "hidden": true, "type": "string", "enum": ["object", "function", "undefined", "string", "number", "boolean", "symbol"], "description": "Object type." }
                 ]
             },
             {
@@ -768,12 +843,12 @@
                 "description": "Description of an isolated world.",
                 "properties": [
                     { "name": "id", "$ref": "ExecutionContextId", "description": "Unique id of the execution context. It can be used to specify in which execution context script evaluation should be performed." },
-                    { "name": "isPageContext", "type": "boolean", "description": "True if this is a context where inpspected web page scripts run. False if it is a content script isolated context.", "hidden": true },
+                    { "name": "type", "type": "string", "optional": true, "description": "Context type. It is used e.g. to distinguish content scripts from web page script.", "hidden": true },
+                    { "name": "origin", "type": "string", "description": "Execution context origin.", "hidden": true},
                     { "name": "name", "type": "string", "description": "Human readable name describing given context.", "hidden": true},
-                    { "name": "frameId", "$ref": "Page.FrameId", "description": "Id of the owning frame." }
+                    { "name": "frameId", "type": "string", "description": "Id of the owning frame. May be an empty string if the context is not associated with a frame." }
                 ]
             }
-
         ],
         "commands": [
             {
@@ -783,7 +858,7 @@
                     { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." },
                     { "name": "includeCommandLineAPI", "type": "boolean", "optional": true, "description": "Determines whether Command Line API should be available during the evaluation.", "hidden": true },
                     { "name": "doNotPauseOnExceptionsAndMuteConsole", "type": "boolean", "optional": true, "description": "Specifies whether evaluation should stop on exceptions and mute console. Overrides setPauseOnException state.", "hidden": true },
-                    { "name": "contextId", "$ref": "Runtime.ExecutionContextId", "optional": true, "description": "Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page." },
+                    { "name": "contextId", "$ref": "ExecutionContextId", "optional": true, "description": "Specifies in which isolated context to perform evaluation. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page." },
                     { "name": "returnByValue", "type": "boolean", "optional": true, "description": "Whether the result is expected to be a JSON object that should be sent by value." },
                     { "name": "generatePreview", "type": "boolean", "optional": true, "hidden": true, "description": "Whether preview should be generated for the result." }
                 ],
@@ -815,11 +890,13 @@
                 "parameters": [
                     { "name": "objectId", "$ref": "RemoteObjectId", "description": "Identifier of the object to return properties for." },
                     { "name": "ownProperties", "optional": true, "type": "boolean", "description": "If true, returns properties belonging only to the element itself, not to its prototype chain." },
-                    { "name": "accessorPropertiesOnly", "optional": true, "type": "boolean", "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.", "hidden": true }
+                    { "name": "accessorPropertiesOnly", "optional": true, "type": "boolean", "description": "If true, returns accessor properties (with getter/setter) only; internal properties are not returned either.", "hidden": true },
+                    { "name": "generatePreview", "type": "boolean", "optional": true, "hidden": true, "description": "Whether preview should be generated for the results." }
                 ],
                 "returns": [
                     { "name": "result", "type": "array", "items": { "$ref": "PropertyDescriptor" }, "description": "Object properties." },
-                    { "name": "internalProperties", "optional": true, "type": "array", "items": { "$ref": "InternalPropertyDescriptor" }, "description": "Internal object properties (only of the element itself).", "hidden": true }
+                    { "name": "internalProperties", "optional": true, "type": "array", "items": { "$ref": "InternalPropertyDescriptor" }, "description": "Internal object properties (only of the element itself).", "hidden": true },
+                    { "name": "exceptionDetails", "$ref": "Debugger.ExceptionDetails", "optional": true, "hidden": true, "description": "Exception details."}
                 ],
                 "description": "Returns properties of a given object. Object group of the result is inherited from the target object."
             },
@@ -857,6 +934,16 @@
                     { "name": "result", "type": "boolean", "description": "True if the Runtime is in paused on start state." }
                 ],
                 "hidden": true
+            },
+            {
+                "name": "setCustomObjectFormatterEnabled",
+                "parameters": [
+                    {
+                        "name": "enabled",
+                        "type": "boolean"
+                    }
+                ],
+                "hidden": true
             }
         ],
         "events": [
@@ -895,10 +982,11 @@
                 "type": "object",
                 "description": "Console message.",
                 "properties": [
-                    { "name": "source", "type": "string", "enum": ["xml", "javascript", "network", "console-api", "storage", "appcache", "rendering", "css", "security", "other", "deprecation"], "description": "Message source." },
-                    { "name": "level", "type": "string", "enum": ["log", "warning", "error", "debug", "info"], "description": "Message severity." },
+                    { "name": "source", "type": "string", "enum": ["xml", "javascript", "network", "console-api", "storage", "appcache", "rendering", "security", "other", "deprecation"], "description": "Message source." },
+                    { "name": "level", "type": "string", "enum": ["log", "warning", "error", "debug", "info", "revokedError"], "description": "Message severity." },
                     { "name": "text", "type": "string", "description": "Message text." },
                     { "name": "type", "type": "string", "optional": true, "enum": ["log", "dir", "dirxml", "table", "trace", "clear", "startGroup", "startGroupCollapsed", "endGroup", "assert", "profile", "profileEnd"], "description": "Console message type." },
+                    { "name": "scriptId", "type": "string", "optional": true, "description": "Script ID of the message origin." },
                     { "name": "url", "type": "string", "optional": true, "description": "URL of the message origin." },
                     { "name": "line", "type": "integer", "optional": true, "description": "Line number in the resource that generated this message." },
                     { "name": "column", "type": "integer", "optional": true, "description": "Column number in the resource that generated this message." },
@@ -908,7 +996,9 @@
                     { "name": "asyncStackTrace", "$ref": "AsyncStackTrace", "optional": true, "description": "Asynchronous JavaScript stack trace that preceded this message, if available.", "hidden": true },
                     { "name": "networkRequestId", "$ref": "Network.RequestId", "optional": true, "description": "Identifier of the network request associated with this message." },
                     { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp, when this message was fired.", "hidden": true },
-                    { "name": "executionContextId", "$ref": "Runtime.ExecutionContextId", "optional": true, "description": "Identifier of the context where this message was created", "hidden": true }
+                    { "name": "executionContextId", "$ref": "Runtime.ExecutionContextId", "optional": true, "description": "Identifier of the context where this message was created", "hidden": true },
+                    { "name": "messageId", "type": "integer", "hidden": true, "optional": true, "description": "Message id." },
+                    { "name": "relatedMessageId", "type": "integer", "hidden": true, "optional": true, "description": "Related message id." }
                 ]
             },
             {
@@ -953,29 +1043,6 @@
             {
                 "name": "clearMessages",
                 "description": "Clears console messages collected in the browser."
-            },
-            {
-                "name": "setMonitoringXHREnabled",
-                "parameters": [
-                    { "name": "enabled", "type": "boolean", "description": "Monitoring enabled state." }
-                ],
-                "description": "Toggles monitoring of XMLHttpRequest. If <code>true</code>, console will receive messages upon each XHR issued.",
-                "hidden": true
-            },
-            {
-                "name": "addInspectedNode",
-                "parameters": [
-                    { "name": "nodeId", "$ref": "DOM.NodeId", "description": "DOM node id to be accessible by means of $x command line API." }
-                ],
-                "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).",
-                "hidden": true
-            },
-            {
-                "name": "addInspectedHeapObject",
-                "parameters": [
-                    { "name": "heapObjectId", "type": "integer" }
-                ],
-                "hidden": true
             }
         ],
         "events": [
@@ -1002,6 +1069,66 @@
         ]
     },
     {
+        "domain": "Security",
+        "description": "Security",
+        "hidden": true,
+        "types": [
+            {
+                "id": "SecurityState",
+                "type": "string",
+                "enum": ["unknown", "neutral", "insecure", "warning", "secure"],
+                "description": "The security level of a page or resource."
+            },
+            {
+                "id": "SecurityStateExplanation",
+                "type": "object",
+                "properties": [
+                    { "name": "securityState", "$ref": "SecurityState", "description": "Security state representing the severity of the factor being explained." },
+                    { "name": "summary", "type": "string", "description": "Short phrase describing the type of factor." },
+                    { "name": "description", "type": "string", "description": "Full text explanation of the factor." },
+                    { "name": "certificateId", "$ref": "Network.CertificateId", "optional": true, "description": "Associated certificate id." }
+                ],
+                "description": "An explanation of an factor contributing to the security state."
+            },
+            {
+                "id": "MixedContentStatus",
+                "type": "object",
+                "properties": [
+                    { "name": "ranInsecureContent", "type": "boolean", "description": "True if the page ran insecure content such as scripts." },
+                    { "name": "displayedInsecureContent", "type": "boolean", "description": "True if the page displayed insecure content such as images." },
+                    { "name": "ranInsecureContentStyle", "$ref": "SecurityState", "description": "Security state representing a page that ran insecure content." },
+                    { "name": "displayedInsecureContentStyle", "$ref": "SecurityState", "description": "Security state representing a page that displayed insecure content." }
+                ],
+                "description": "Information about mixed content on the page."
+            }
+        ],
+        "commands": [
+            {
+                "name": "enable",
+                "description": "Enables tracking security state changes.",
+                "handlers": ["browser"]
+            },
+            {
+                "name": "disable",
+                "description": "Disables tracking security state changes.",
+                "handlers": ["browser"]
+            }
+        ],
+        "events": [
+            {
+                "name": "securityStateChanged",
+                "description": "The security state of the page changed.",
+                "parameters": [
+                    { "name": "securityState", "$ref": "SecurityState", "description": "Security state." },
+                    { "name": "explanations", "type": "array", "items": { "$ref": "SecurityStateExplanation" }, "description": "List of explanations for the security state. If the overall security state is `insecure` or `warning`, at least one corresponding explanation should be included.", "optional": true },
+                    { "name": "mixedContentStatus", "$ref": "MixedContentStatus", "description": "Information about mixed content on the page.", "optional": true },
+                    { "name": "schemeIsCryptographic", "type": "boolean", "description": "True if the page was loaded over cryptographic transport such as HTTPS.", "optional": true }
+                ],
+                "handlers": ["browser"]
+            }
+        ]
+    },
+    {
         "domain": "Network",
         "description": "Network domain allows tracking network activities of the page. It exposes information about http, file, data and other requests and responses, their headers, bodies, timing, etc.",
         "types": [
@@ -1039,12 +1166,20 @@
                     { "name": "connectEnd", "type": "number", "description": "Connected to the remote host." },
                     { "name": "sslStart", "type": "number", "description": "Started SSL handshake." },
                     { "name": "sslEnd", "type": "number", "description": "Finished SSL handshake." },
+                    { "name": "workerStart", "type": "number", "description": "Started running ServiceWorker.", "hidden": true },
+                    { "name": "workerReady", "type": "number", "description": "Finished Starting ServiceWorker.", "hidden": true },
                     { "name": "sendStart", "type": "number", "description": "Started sending request." },
                     { "name": "sendEnd", "type": "number", "description": "Finished sending request." },
                     { "name": "receiveHeadersEnd", "type": "number", "description": "Finished receiving response headers." }
                 ]
             },
             {
+                "id": "ResourcePriority",
+                "type": "string",
+                "enum": ["VeryLow", "Low", "Medium", "High", "VeryHigh"],
+                "description": "Loading priority of a resource request."
+            },
+            {
                 "id": "Request",
                 "type": "object",
                 "description": "HTTP request data.",
@@ -1052,10 +1187,57 @@
                     { "name": "url", "type": "string", "description": "Request URL." },
                     { "name": "method", "type": "string", "description": "HTTP request method." },
                     { "name": "headers", "$ref": "Headers", "description": "HTTP request headers." },
-                    { "name": "postData", "type": "string", "optional": true, "description": "HTTP POST request data." }
+                    { "name": "postData", "type": "string", "optional": true, "description": "HTTP POST request data." },
+                    { "name": "mixedContentType", "optional": true, "type": "string", "enum": ["blockable", "optionally-blockable", "none"], "description": "The mixed content status of the request, as defined in http://www.w3.org/TR/mixed-content/" },
+                    { "name": "initialPriority", "$ref": "ResourcePriority", "description": "Priority of the resource request at the time request is sent."}
                 ]
             },
             {
+                "id": "CertificateId",
+                "type": "integer",
+                "description": "An internal certificate ID value."
+            },
+            {
+                "id": "CertificateSubject",
+                "type": "object",
+                "description": "Subject of a certificate.",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "Certificate subject name." },
+                    { "name": "sanDnsNames", "type": "array", "items": { "type": "string" }, "description": "Subject Alternative Name (SAN) DNS names." },
+                    { "name": "sanIpAddresses", "type": "array", "items": { "type": "string" }, "description": "Subject Alternative Name (SAN) IP addresses." }
+                ]
+            },
+            {
+                "id": "CertificateDetails",
+                "type": "object",
+                "description": "Details about a request's certificate.",
+                "properties": [
+                    { "name": "subject", "$ref": "CertificateSubject", "description": "Certificate subject." },
+                    { "name": "issuer", "type": "string", "description": "Name of the issuing CA." },
+                    { "name": "validFrom", "$ref": "Timestamp", "description": "Certificate valid from date." },
+                    { "name": "validTo", "$ref": "Timestamp", "description": "Certificate valid to (expiration) date" }
+                ]
+            },
+            {
+                "id": "SecurityDetails",
+                "type": "object",
+                "description": "Security details about a request.",
+                "properties": [
+                    { "name": "protocol", "type": "string", "description": "Protocol name (e.g. \"TLS 1.2\" or \"QUIC\"." },
+                    { "name": "keyExchange", "type": "string", "description": "Key Exchange used by the connection." },
+                    { "name": "cipher", "type": "string", "description": "Cipher name." },
+                    { "name": "mac", "type": "string", "optional": true, "description": "TLS MAC. Note that AEAD ciphers do not have separate MACs." },
+                    { "name": "certificateId", "$ref": "CertificateId", "description": "Certificate ID value." }
+                ]
+            },
+            {
+                "id": "BlockedReason",
+                "type": "string",
+                "description": "The reason why request was blocked.",
+                "enum": ["csp", "mixed-content", "origin", "inspector", "other"],
+                "hidden": true
+            },
+            {
                 "id": "Response",
                 "type": "object",
                 "description": "HTTP response data.",
@@ -1073,8 +1255,12 @@
                     { "name": "remoteIPAddress", "type": "string", "optional": true, "hidden": true, "description": "Remote IP address." },
                     { "name": "remotePort", "type": "integer", "optional": true, "hidden": true, "description": "Remote port."},
                     { "name": "fromDiskCache", "type": "boolean", "optional": true, "description": "Specifies that the request was served from the disk cache." },
+                    { "name": "fromServiceWorker", "type": "boolean", "optional": true, "description": "Specifies that the request was served from the ServiceWorker." },
                     { "name": "encodedDataLength", "type": "number", "optional": false, "description": "Total number of bytes received for this request so far." },
-                    { "name": "timing", "$ref": "ResourceTiming", "optional": true, "description": "Timing information for the given request." }
+                    { "name": "timing", "$ref": "ResourceTiming", "optional": true, "description": "Timing information for the given request." },
+                    { "name": "protocol", "type": "string", "optional": true, "description": "Protocol used to fetch this request." },
+                    { "name": "securityState", "$ref": "Security.SecurityState", "description": "Security state of the request resource." },
+                    { "name": "securityDetails", "$ref": "SecurityDetails", "optional": true, "description": "Security details for the request." }
                 ]
             },
             {
@@ -1133,6 +1319,23 @@
                     { "name": "lineNumber", "type": "number", "optional": true, "description": "Initiator line number, set for Parser type only." },
                     { "name": "asyncStackTrace", "$ref": "Console.AsyncStackTrace", "optional": true, "description": "Initiator asynchronous JavaScript stack trace, if available.", "hidden": true }
                 ]
+            },
+            {
+                "id": "Cookie",
+                "type": "object",
+                "description": "Cookie object",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "Cookie name." },
+                    { "name": "value", "type": "string", "description": "Cookie value." },
+                    { "name": "domain", "type": "string", "description": "Cookie domain." },
+                    { "name": "path", "type": "string", "description": "Cookie path." },
+                    { "name": "expires", "type": "number", "description": "Cookie expires." },
+                    { "name": "size", "type": "integer", "description": "Cookie size." },
+                    { "name": "httpOnly", "type": "boolean", "description": "True if cookie is http-only." },
+                    { "name": "secure", "type": "boolean", "description": "True if cookie is secure." },
+                    { "name": "session", "type": "boolean", "description": "True in case of session cookie." }
+                ],
+                "hidden": true
             }
         ],
         "commands": [
@@ -1160,6 +1363,7 @@
             },
             {
                 "name": "getResponseBody",
+                "async": true,
                 "description": "Returns content served for the given request.",
                 "parameters": [
                     { "name": "requestId", "$ref": "RequestId", "description": "Identifier of the network request to get content for." }
@@ -1170,6 +1374,22 @@
                 ]
             },
             {
+                "name": "addBlockedURL",
+                "description": "Blocks specific URL from loading.",
+                "parameters": [
+                    { "name": "url", "type": "string", "description": "URL to block." }
+                ],
+                "hidden": true
+            },
+            {
+                "name": "removeBlockedURL",
+                "description": "Cancels blocking of a specific URL from loading.",
+                "parameters": [
+                    { "name": "url", "type": "string", "description": "URL to stop blocking." }
+                ],
+                "hidden": true
+            },
+            {
                 "name": "replayXHR",
                 "description": "This method sends a new XMLHttpRequest which is identical to the original one. The following parameters should be identical: method, url, async, request body, extra headers, withCredentials attribute, user, password.",
                 "parameters": [
@@ -1178,6 +1398,14 @@
                 "hidden": true
             },
             {
+                "name": "setMonitoringXHREnabled",
+                "parameters": [
+                    { "name": "enabled", "type": "boolean", "description": "Monitoring enabled state." }
+                ],
+                "description": "Toggles monitoring of XMLHttpRequest. If <code>true</code>, console will receive messages upon each XHR issued.",
+                "hidden": true
+            },
+            {
                 "name": "canClearBrowserCache",
                 "description": "Tells whether clearing browser cache is supported.",
                 "returns": [
@@ -1202,6 +1430,36 @@
                 "handlers": ["browser"]
             },
             {
+                "name": "getCookies",
+                "returns": [
+                    { "name": "cookies", "type": "array", "items": { "$ref": "Cookie" }, "description": "Array of cookie objects." }
+                ],
+                "description": "Returns all browser cookies. Depending on the backend support, will return detailed cookie information in the <code>cookies</code> field.",
+                "handlers": ["browser"],
+                "async": true,
+                "hidden": true
+            },
+            {
+                "name": "deleteCookie",
+                "parameters": [
+                    { "name": "cookieName", "type": "string", "description": "Name of the cookie to remove." },
+                    { "name": "url", "type": "string", "description": "URL to match cooke domain and path." }
+                ],
+                "description": "Deletes browser cookie with given name, domain and path.",
+                "handlers": ["browser"],
+                "async": true,
+                "hidden": true
+            },
+            {
+                "name": "canEmulateNetworkConditions",
+                "description": "Tells whether emulation of network conditions is supported.",
+                "returns": [
+                  { "name": "result", "type": "boolean", "description": "True if emulation of network conditions is supported." }
+                ],
+                "hidden": true,
+                "handlers": ["browser"]
+            },
+            {
                 "name": "emulateNetworkConditions",
                 "description": "Activates emulation of network conditions.",
                 "parameters": [
@@ -1221,20 +1479,32 @@
                 "description": "Toggles ignoring cache for each request. If <code>true</code>, cache will not be used."
             },
             {
-                "name": "loadResourceForFrontend",
-                "async": true,
+                "name": "setDataSizeLimitsForTest",
                 "parameters": [
-                    { "name": "frameId", "$ref": "Page.FrameId", "description": "Frame to load the resource from." },
-                    { "name": "url", "type": "string", "description": "URL of the resource to load." },
-                    { "name": "requestHeaders", "$ref": "Network.Headers", "optional": true, "description": "Request headers." }
+                    { "name": "maxTotalSize", "type": "integer", "description": "Maximum total buffer size." },
+                    { "name": "maxResourceSize", "type": "integer", "description": "Maximum per-resource size." }
+                ],
+                "description": "For testing.",
+                "hidden": true
+            },
+            {
+                "name": "getCertificateDetails",
+                "description": "Returns details for the given certificate.",
+                "parameters": [
+                    { "name": "certificateId", "$ref": "CertificateId", "description": "ID of the certificate to get details for." }
                 ],
                 "returns": [
-                    { "name": "statusCode", "type": "number", "description": "HTTP status code." },
-                    { "name": "responseHeaders", "$ref": "Network.Headers", "description": "Response headers." },
-                    { "name": "content", "type": "string", "description": "Resource content." }
+                    { "name": "result", "$ref": "CertificateDetails", "description": "Certificate details." }
                 ],
-                "description": "Loads a resource in the context of a frame on the inspected page without cross origin checks.",
-                "hidden": true
+                "handlers": ["browser"]
+            },
+            {
+                "name": "showCertificateViewer",
+                "description": "Displays native dialog with the certificate details.",
+                "parameters": [
+                    { "name": "certificateId", "$ref": "CertificateId", "description": "Certificate id." }
+                ],
+                "handlers": ["browser"]
             }
         ],
         "events": [
@@ -1248,8 +1518,10 @@
                     { "name": "documentURL", "type": "string", "description": "URL of the document this request is loaded for." },
                     { "name": "request", "$ref": "Request", "description": "Request data." },
                     { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
+                    { "name": "wallTime", "$ref": "Timestamp", "hidden": true, "description": "UTC Timestamp." },
                     { "name": "initiator", "$ref": "Initiator", "description": "Request initiator." },
-                    { "name": "redirectResponse", "optional": true, "$ref": "Response", "description": "Redirect response data." }
+                    { "name": "redirectResponse", "optional": true, "$ref": "Response", "description": "Redirect response data." },
+                    { "name": "type", "$ref": "Page.ResourceType", "optional": true, "hidden": true, "description": "Type of this resource." }
                 ]
             },
             {
@@ -1298,7 +1570,8 @@
                     { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
                     { "name": "type", "$ref": "Page.ResourceType", "description": "Resource type." },
                     { "name": "errorText", "type": "string", "description": "User friendly error message." },
-                    { "name": "canceled", "type": "boolean", "optional": true, "description": "True if loading was canceled." }
+                    { "name": "canceled", "type": "boolean", "optional": true, "description": "True if loading was canceled." },
+                    { "name": "blockedReason", "$ref": "BlockedReason", "optional": true, "description": "The reason why loading was blocked, if any.", "hidden": true }
                 ]
             },
             {
@@ -1307,6 +1580,7 @@
                 "parameters": [
                     { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
                     { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
+                    { "name": "wallTime", "$ref": "Timestamp", "hidden": true, "description": "UTC Timestamp." },
                     { "name": "request", "$ref": "WebSocketRequest", "description": "WebSocket request data." }
                 ],
                 "hidden": true
@@ -1368,6 +1642,18 @@
                     { "name": "response", "$ref": "WebSocketFrame", "description": "WebSocket response data." }
                 ],
                 "hidden": true
+            },
+            {
+                "name": "eventSourceMessageReceived",
+                "description": "Fired when EventSource message is received.",
+                "parameters": [
+                    { "name": "requestId", "$ref": "RequestId", "description": "Request identifier." },
+                    { "name": "timestamp", "$ref": "Timestamp", "description": "Timestamp." },
+                    { "name": "eventName", "type": "string", "description": "Message type." },
+                    { "name": "eventId", "type": "string", "description": "Message identifier." },
+                    { "name": "data", "type": "string", "description": "Message content." }
+                ],
+                "hidden": true
             }
         ]
     },
@@ -1590,6 +1876,80 @@
         ]
     },
     {
+        "domain": "CacheStorage",
+        "hidden": true,
+        "types": [
+            {
+                "id": "CacheId",
+                "type": "string",
+                "description": "Unique identifier of the Cache object."
+            },
+            {
+                "id": "DataEntry",
+                "type": "object",
+                "description": "Data entry.",
+                "properties": [
+                    { "name": "request", "type": "string", "description": "Request url spec." },
+                    { "name": "response", "type": "string", "description": "Response stataus text." }
+                ]
+            },
+            {
+                "id": "Cache",
+                "type": "object",
+                "description": "Cache identifier.",
+                "properties": [
+                    { "name": "cacheId", "$ref": "CacheId", "description": "An opaque unique id of the cache." },
+                    { "name": "securityOrigin", "type": "string", "description": "Security origin of the cache." },
+                    { "name": "cacheName", "type": "string", "description": "The name of the cache." }
+                ]
+            }
+        ],
+        "commands": [
+            {
+                "name": "requestCacheNames",
+                "async": true,
+                "parameters": [
+                    { "name": "securityOrigin", "type": "string", "description": "Security origin." }
+                ],
+                "returns": [
+                    { "name": "caches", "type": "array", "items": { "$ref": "Cache" }, "description": "Caches for the security origin." }
+                ],
+                "description": "Requests cache names."
+            },
+            {
+                "name": "requestEntries",
+                "async": true,
+                "parameters": [
+                    { "name": "cacheId", "$ref": "CacheId", "description": "ID of cache to get entries from." },
+                    { "name": "skipCount", "type": "integer", "description": "Number of records to skip." },
+                    { "name": "pageSize", "type": "integer", "description": "Number of records to fetch." }
+                ],
+                "returns": [
+                    { "name": "cacheDataEntries", "type": "array", "items": { "$ref": "DataEntry" }, "description": "Array of object store data entries." },
+                    { "name": "hasMore", "type": "boolean", "description": "If true, there are more entries to fetch in the given range." }
+                ],
+                "description": "Requests data from cache."
+            },
+            {
+                "name": "deleteCache",
+                "async": true,
+                "parameters": [
+                    { "name": "cacheId", "$ref": "CacheId", "description": "Id of cache for deletion." }
+                ],
+                "description": "Deletes a cache."
+            },
+            {
+                "name": "deleteEntry",
+                "async": true,
+                "parameters": [
+                    { "name": "cacheId", "$ref": "CacheId", "description": "Id of cache where the entry will be deleted." },
+                    { "name": "request", "type": "string", "description": "URL spec of the request." }
+                ],
+                "description": "Deletes a cache entry."
+            }
+        ]
+    },
+    {
         "domain": "DOMStorage",
         "hidden": true,
         "description": "Query and modify DOM storage.",
@@ -1885,15 +2245,42 @@
                 "hidden": true
             },
             {
+                "id": "BackendNode",
+                "type": "object",
+                "properties": [
+                    { "name": "nodeType", "type": "integer", "description": "<code>Node</code>'s nodeType." },
+                    { "name": "nodeName", "type": "string", "description": "<code>Node</code>'s nodeName." },
+                    { "name": "backendNodeId", "$ref": "BackendNodeId" }
+                ],
+                "hidden": true,
+                "description": "Backend node with a friendly name."
+            },
+            {
                 "id": "PseudoType",
                 "type": "string",
-                "enum": ["before", "after"],
+                "enum": [
+                    "first-line",
+                    "first-letter",
+                    "before",
+                    "after",
+                    "backdrop",
+                    "selection",
+                    "first-line-inherited",
+                    "scrollbar",
+                    "scrollbar-thumb",
+                    "scrollbar-button",
+                    "scrollbar-track",
+                    "scrollbar-track-piece",
+                    "scrollbar-corner",
+                    "resizer",
+                    "input-list-button"
+                ],
                 "description": "Pseudo element type."
             },
             {
                 "id": "ShadowRootType",
                 "type": "string",
-                "enum": ["user-agent", "author"],
+                "enum": ["user-agent", "open", "closed"],
                 "description": "Shadow root type."
             },
             {
@@ -1923,23 +2310,8 @@
                     { "name": "shadowRoots", "type": "array", "optional": true, "items": { "$ref": "Node" }, "description": "Shadow root list for given element host.", "hidden": true },
                     { "name": "templateContent", "$ref": "Node", "optional": true, "description": "Content document fragment for template elements.", "hidden": true },
                     { "name": "pseudoElements", "type": "array", "items": { "$ref": "Node" }, "optional": true, "description": "Pseudo elements associated with this node.", "hidden": true },
-                    { "name": "importedDocument", "$ref": "Node", "optional": true, "description": "Import document for the HTMLImport links." }
-                ],
-                "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
-            },
-            {
-                "id": "EventListener",
-                "type": "object",
-                "hidden": true,
-                "properties": [
-                    { "name": "type", "type": "string", "description": "<code>EventListener</code>'s type." },
-                    { "name": "useCapture", "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
-                    { "name": "isAttribute", "type": "boolean", "description": "<code>EventListener</code>'s isAttribute." },
-                    { "name": "nodeId", "$ref": "NodeId", "description": "Target <code>DOMNode</code> id." },
-                    { "name": "handlerBody", "type": "string", "description": "Event handler function body." },
-                    { "name": "location", "$ref": "Debugger.Location", "description": "Handler code location." },
-                    { "name": "sourceName", "type": "string", "optional": true, "description": "Source script URL." },
-                    { "name": "handler", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Event handler function value." }
+                    { "name": "importedDocument", "$ref": "Node", "optional": true, "description": "Import document for the HTMLImport links." },
+                    { "name": "distributedNodes", "type": "array", "items": { "$ref": "BackendNode" }, "optional": true, "description": "Distributed nodes for given insertion point.", "hidden": true }
                 ],
                 "description": "DOM interaction is implemented in terms of mirror objects that represent the actual DOM nodes. DOMNode is a base node mirror type."
             },
@@ -2008,6 +2380,7 @@
                     { "name": "showInfo", "type": "boolean", "optional": true, "description": "Whether the node info tooltip should be shown (default: false)." },
                     { "name": "showRulers", "type": "boolean", "optional": true, "description": "Whether the rulers should be shown (default: false)." },
                     { "name": "showExtensionLines", "type": "boolean", "optional": true, "description": "Whether the extension lines from node to the rulers should be shown (default: false)." },
+                    { "name": "displayAsMaterial", "type": "boolean", "optional": true, "hidden": true},
                     { "name": "contentColor", "$ref": "RGBA", "optional": true, "description": "The content box highlight fill color (default: transparent)." },
                     { "name": "paddingColor", "$ref": "RGBA", "optional": true, "description": "The padding highlight fill color (default: transparent)." },
                     { "name": "borderColor", "$ref": "RGBA", "optional": true, "description": "The border highlight fill color (default: transparent)." },
@@ -2017,6 +2390,17 @@
                     { "name": "shapeMarginColor", "$ref": "RGBA", "optional": true, "hidden": true, "description": "The shape margin fill color (default: transparent)." }
                 ],
                 "description": "Configuration data for the highlighting of page elements."
+            },
+            {
+                "id": "InspectMode",
+                "type": "string",
+                "hidden": true,
+                "enum": [
+                    "searchForNode",
+                    "searchForUAShadowDOM",
+                    "showLayoutEditor",
+                    "none"
+                ]
             }
         ],
         "commands": [
@@ -2118,18 +2502,6 @@
                 "description": "Removes attribute with given name from an element with given id."
             },
             {
-                "name": "getEventListenersForNode",
-                "parameters": [
-                    { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get listeners for." },
-                    { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name for handler value. Handler value is not returned without this parameter specified." }
-                ],
-                "returns": [
-                    { "name": "listeners", "type": "array", "items": { "$ref": "EventListener" }, "description": "Array of relevant listeners." }
-                ],
-                "description": "Returns event listeners relevant to the node.",
-                "hidden": true
-            },
-            {
                 "name": "getOuterHTML",
                 "parameters": [
                     { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get markup for." }
@@ -2150,7 +2522,8 @@
             {
                 "name": "performSearch",
                 "parameters": [
-                    { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." }
+                    { "name": "query", "type": "string", "description": "Plain text or query selector or XPath search query." },
+                    { "name": "includeUserAgentShadowDOM", "type": "boolean", "optional": true, "description": "True to search in user agent shadow DOM.", "hidden": true }
                 ],
                 "returns": [
                     { "name": "searchId", "type": "string", "description": "Unique search session identifier." },
@@ -2191,11 +2564,10 @@
                 "description": "Requests that the node is sent to the caller given the JavaScript node object reference. All nodes that form the path from the node to the root are also sent to the client as a series of <code>setChildNodes</code> notifications."
             },
             {
-                "name": "setInspectModeEnabled",
+                "name": "setInspectMode",
                 "hidden": true,
                 "parameters": [
-                    { "name": "enabled", "type": "boolean", "description": "True to enable inspection mode, false to disable it." },
-                    { "name": "inspectUAShadowDOM", "type": "boolean", "optional": true, "description": "True to enable inspection mode for user agent shadow DOM." },
+                    { "name": "mode", "$ref": "InspectMode", "description": "Set an inspection mode." },
                     { "name": "highlightConfig", "$ref": "HighlightConfig", "optional": true, "description": "A descriptor for the highlight appearance of hovered-over nodes. May be omitted if <code>enabled == false</code>." }
                 ],
                 "description": "Enters the 'inspect' mode. In this mode, elements that user is hovering over are highlighted. Backend then generates 'inspectNodeRequested' event upon element selection."
@@ -2227,6 +2599,7 @@
                 "parameters": [
                     { "name": "highlightConfig", "$ref": "HighlightConfig",  "description": "A descriptor for the highlight appearance." },
                     { "name": "nodeId", "$ref": "NodeId", "optional": true, "description": "Identifier of the node to highlight." },
+                    { "name": "backendNodeId", "$ref": "BackendNodeId", "optional": true, "description": "Identifier of the backend node to highlight." },
                     { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "optional": true, "description": "JavaScript object id of the node to be highlighted.", "hidden": true }
                 ],
                 "description": "Highlights DOM node with given id or with the given JavaScript object wrapper. Either nodeId or objectId must be specified."
@@ -2268,6 +2641,14 @@
                 "hidden": true
             },
             {
+                "name": "setInspectedNode",
+                "parameters": [
+                    { "name": "nodeId", "$ref": "NodeId", "description": "DOM node id to be accessible by means of $x command line API." }
+                ],
+                "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions).",
+                "hidden": true
+            },
+            {
                 "name": "resolveNode",
                 "parameters": [
                     { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to resolve." },
@@ -2379,6 +2760,17 @@
                 ],
                 "description": "Returns the id of the nearest ancestor that is a relayout boundary.",
                 "hidden": true
+            },
+            {
+                "name": "getHighlightObjectForTest",
+                "parameters": [
+                    { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to get highlight object for." }
+                ],
+                "returns": [
+                    { "name": "highlight", "type": "object", "description": "Highlight data for the node." }
+                ],
+                "description": "For testing.",
+                "hidden": true
             }
         ],
         "events": [
@@ -2389,9 +2781,9 @@
             {
                 "name": "inspectNodeRequested",
                 "parameters": [
-                    { "name": "nodeId", "$ref": "NodeId", "description": "Id of the node to inspect." }
+                    { "name": "backendNodeId", "$ref": "BackendNodeId", "description": "Id of the node to inspect." }
                 ],
-                "description": "Fired when the node should be inspected. This happens after call to <code>setInspectModeEnabled</code>.",
+                "description": "Fired when the node should be inspected. This happens after call to <code>setInspectMode</code>.",
                 "hidden" : true
             },
             {
@@ -2495,6 +2887,15 @@
                 ],
                 "description": "Called when a pseudo element is removed from an element.",
                 "hidden": true
+            },
+            {
+                "name": "distributedNodesUpdated",
+                "parameters": [
+                    { "name": "insertionPointId", "$ref": "NodeId", "description": "Insertion point where distrubuted nodes were updated." },
+                    { "name": "distributedNodes", "type": "array", "items": { "$ref": "BackendNode" }, "description": "Distributed nodes for given insertion point." }
+                ],
+                "description": "Called when distrubution is changed.",
+                "hidden": true
             }
         ]
     },
@@ -2510,14 +2911,14 @@
             {
                 "id": "StyleSheetOrigin",
                 "type": "string",
-                "enum": ["user", "user-agent", "inspector", "regular"],
-                "description": "Stylesheet type: \"user\" for user stylesheets, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets."
+                "enum": ["injected", "user-agent", "inspector", "regular"],
+                "description": "Stylesheet type: \"injected\" for stylesheets injected via extension, \"user-agent\" for user-agent stylesheets, \"inspector\" for stylesheets created by the inspector (i.e. those holding the \"via inspector\" rules), \"regular\" for regular stylesheets."
             },
             {
                 "id": "PseudoIdMatches",
                 "type": "object",
                 "properties": [
-                    { "name": "pseudoId", "type": "integer", "description": "Pseudo style identifier (see <code>enum PseudoId</code> in <code>RenderStyleConstants.h</code>)."},
+                    { "name": "pseudoId", "type": "integer", "description": "Pseudo style identifier (see <code>enum PseudoId</code> in <code>ComputedStyleConstants.h</code>)."},
                     { "name": "matches", "type": "array", "items": { "$ref": "RuleMatch" }, "description": "Matches of CSS rules applicable to the pseudo style."}
                 ],
                 "description": "CSS rule collection for a single pseudo style."
@@ -2568,6 +2969,7 @@
                     { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with the stylesheet (if any)." },
                     { "name": "origin", "$ref": "StyleSheetOrigin", "description": "Stylesheet origin."},
                     { "name": "title", "type": "string", "description": "Stylesheet title."},
+                    { "name": "ownerNode", "$ref": "DOM.BackendNodeId", "optional": true, "description": "The backend id for the owner node of the stylesheet." },
                     { "name": "disabled", "type": "boolean", "description": "Denotes whether the stylesheet is disabled."},
                     { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "Whether the sourceURL field value comes from the sourceURL comment." },
                     { "name": "isInline", "type": "boolean", "description": "Whether this stylesheet is created for STYLE tag by parser. This flag is not set for document.written STYLE tags." },
@@ -2604,7 +3006,8 @@
                 "type": "object",
                 "properties": [
                     { "name": "name", "type": "string", "description": "Shorthand name." },
-                    { "name": "value", "type": "string", "description": "Shorthand value." }
+                    { "name": "value", "type": "string", "description": "Shorthand value." },
+                    { "name": "important", "type": "boolean", "optional": true, "description": "Whether the property has \"!important\" annotation (implies <code>false</code> if absent)." }
                 ]
             },
             {
@@ -2653,13 +3056,16 @@
                     { "name": "parentStyleSheetId", "$ref": "StyleSheetId", "optional": true, "description": "Identifier of the stylesheet containing this object (if exists)." },
                     { "name": "mediaList", "type": "array", "items": { "$ref": "MediaQuery" }, "optional": true, "hidden": true, "description": "Array of media queries." }
                 ],
-                "description": "CSS media query descriptor."
+                "description": "CSS media rule descriptor."
             },
             {
                 "id": "MediaQuery",
-                "type": "array",
-                "items": { "$ref": "MediaQueryExpression" },
-                "description": "An array of media query expressions.",
+                "type": "object",
+                "properties": [
+                    { "name": "expressions", "type": "array", "items": { "$ref": "MediaQueryExpression" }, "description": "Array of media query expressions." },
+                    { "name": "active", "type": "boolean", "description": "Whether the media query condition is satisfied." }
+                ],
+                "description": "Media query descriptor.",
                 "hidden": true
             },
             {
@@ -2669,9 +3075,10 @@
                     { "name": "value", "type": "number", "description": "Media query expression value."},
                     { "name": "unit", "type": "string", "description": "Media query expression units."},
                     { "name": "feature", "type": "string", "description": "Media query expression feature."},
+                    { "name": "valueRange", "$ref": "SourceRange", "optional": true, "description": "The associated range of the value text in the enclosing stylesheet (if available)." },
                     { "name": "computedLength", "type": "number", "optional": true, "description": "Computed length of media query expression (if applicable)."}
                 ],
-                "description": "Media query expression data.",
+                "description": "Media query expression descriptor.",
                 "hidden": true
             },
             {
@@ -2699,8 +3106,8 @@
                 "name": "getMatchedStylesForNode",
                 "parameters": [
                     { "name": "nodeId", "$ref": "DOM.NodeId" },
-                    { "name": "includePseudo", "type": "boolean", "optional": true, "description": "Whether to include pseudo styles (default: true)." },
-                    { "name": "includeInherited", "type": "boolean", "optional": true, "description": "Whether to include inherited styles (default: true)." }
+                    { "name": "excludePseudo", "type": "boolean", "optional": true, "description": "Whether to exclude pseudo styles (default: false)." },
+                    { "name": "excludeInherited", "type": "boolean", "optional": true, "description": "Whether to exclude inherited styles (default: false)." }
                 ],
                 "returns": [
                     { "name": "matchedCSSRules", "type": "array", "items": { "$ref": "RuleMatch" }, "optional": true, "description": "CSS rules matching this node, from all applicable stylesheets." },
@@ -2736,7 +3143,6 @@
                     { "name": "nodeId", "$ref": "DOM.NodeId" }
                 ],
                 "returns": [
-                    { "name": "cssFamilyName", "type": "string", "description": "Font family name which is determined by computed style." },
                     { "name": "fonts", "type": "array", "items": { "$ref": "PlatformFontUsage" }, "description": "Usage statistics for every employed platform font." }
                 ],
                 "description": "Requests information about platform fonts which we used to render child TextNodes in the given node.",
@@ -2761,26 +3167,38 @@
                 "description": "Sets the new stylesheet text."
             },
             {
-                "name": "setPropertyText",
+                "name": "setRuleSelector",
                 "parameters": [
                     { "name": "styleSheetId", "$ref": "StyleSheetId" },
-                    { "name": "range", "$ref": "SourceRange", "description": "Either a source range of the property to be edited or an empty range representing a position for the property insertion." },
+                    { "name": "range", "$ref": "SourceRange" },
+                    { "name": "selector", "type": "string" }
+                ],
+                "returns": [
+                    { "name": "rule", "$ref": "CSSRule", "description": "The resulting rule after the selector modification." }
+                ],
+                "description": "Modifies the rule selector."
+            },
+            {
+                "name": "setStyleText",
+                "parameters": [
+                    { "name": "styleSheetId", "$ref": "StyleSheetId" },
+                    { "name": "range", "$ref": "SourceRange" },
                     { "name": "text", "type": "string" }
                 ],
                 "returns": [
-                    { "name": "style", "$ref": "CSSStyle", "description": "The resulting style after the property text modification." }
+                    { "name": "style", "$ref": "CSSStyle", "description": "The resulting style after the selector modification." }
                 ],
-                "description": "Either replaces a property identified by <code>styleSheetId</code> and <code>range</code> with <code>text</code> or inserts a new property <code>text</code> at the position identified by an empty <code>range</code>."
+                "description": "Modifies the style text."
             },
             {
-                "name": "setRuleSelector",
+                "name": "setMediaText",
                 "parameters": [
                     { "name": "styleSheetId", "$ref": "StyleSheetId" },
                     { "name": "range", "$ref": "SourceRange" },
-                    { "name": "selector", "type": "string" }
+                    { "name": "text", "type": "string" }
                 ],
                 "returns": [
-                    { "name": "rule", "$ref": "CSSRule", "description": "The resulting rule after the selector modification." }
+                    { "name": "media", "$ref": "CSSMedia", "description": "The resulting CSS media rule after modification." }
                 ],
                 "description": "Modifies the rule selector."
             },
@@ -2797,13 +3215,14 @@
             {
                 "name": "addRule",
                 "parameters": [
-                    { "name": "styleSheetId", "$ref": "StyleSheetId" },
-                    { "name": "selector", "type": "string" }
+                    { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "The css style sheet identifier where a new rule should be inserted." },
+                    { "name": "ruleText", "type": "string", "description": "The text of a new rule." },
+                    { "name": "location", "$ref": "SourceRange", "description": "Text position of a new rule in the target style sheet." }
                 ],
                 "returns": [
                     { "name": "rule", "$ref": "CSSRule", "description": "The newly created rule." }
                 ],
-                "description": "Creates a new empty rule with the given <code>selector</code> in a stylesheet with given <code>styleSheetId</code>."
+                "description": "Inserts a new rule with the given <code>ruleText</code> in a stylesheet with given <code>styleSheetId</code>, at the position specified by <code>location</code>."
             },
             {
                 "name": "forcePseudoState",
@@ -2820,6 +3239,16 @@
                 ],
                 "description": "Returns all media queries parsed by the rendering engine.",
                 "hidden": true
+            },
+            {
+                "name": "setEffectivePropertyValueForNode",
+                "parameters": [
+                    { "name": "nodeId", "$ref": "DOM.NodeId", "description": "The element id for which to set property." },
+                    { "name": "propertyName", "type": "string"},
+                    { "name": "value", "type": "string"}
+                ],
+                "description": "Find a rule with the given active property for the given node and set the new value for this property",
+                "hidden": true
             }
         ],
         "events": [
@@ -2847,28 +3276,57 @@
                     { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Identifier of the removed stylesheet." }
                 ],
                 "description": "Fired whenever an active document stylesheet is removed."
+            },
+            {
+                "name": "layoutEditorChange",
+                "parameters": [
+                    { "name": "styleSheetId", "$ref": "StyleSheetId", "description": "Identifier of the stylesheet where the modification occurred."},
+                    { "name": "changeRange", "$ref": "SourceRange", "description": "Range where the modification occurred."}
+                ]
             }
         ]
     },
     {
-        "domain": "Timeline",
-        "description": "Timeline provides its clients with instrumentation records that are generated during the page runtime. Timeline instrumentation can be started and stopped using corresponding commands. While timeline is started, it is generating timeline event records.",
+        "domain": "IO",
+        "description": "Input/Output operations for streams produced by DevTools.",
+        "hidden": true,
         "types": [
             {
-                "id": "Counters",
-                "type": "object",
-                "properties": [
-                    { "name": "documents", "type": "integer", "optional": true },
-                    { "name": "nodes", "type": "integer", "optional": true },
-                    { "name": "jsEventListeners", "type": "integer", "optional": true },
-                    { "name": "jsHeapSizeUsed", "type": "number", "optional": true, "description": "Currently used size of JS heap." },
-                    { "name": "gpuMemoryUsedKB", "type": "number", "optional": true, "description": "Current GPU memory usage in kilobytes." },
-                    { "name": "gpuMemoryLimitKB", "type": "number", "optional": true, "description": "Current GPU memory limit in kilobytes." }
+                "id": "StreamHandle",
+                "type": "string"
+            }
                 ],
-                "description": "Current values of counters.",
-                "hidden": true
+        "commands": [
+            {
+                "name": "read",
+                "description": "Read a chunk of the stream",
+                "async": true,
+                "parameters": [
+                    { "name": "handle", "$ref": "StreamHandle", "description": "Handle of the stream to read." },
+                    { "name": "offset", "type": "integer", "optional": true, "description": "Seek to the specified offset before reading (if not specificed, proceed with offset following the last read)." },
+                    { "name": "size", "type": "integer", "optional": true,  "description": "Maximum number of bytes to read (left upon the agent discretion if not specified)." }
+                ],
+                "returns": [
+                    { "name": "data", "type": "string", "description": "Data that were read." },
+                    { "name": "eof", "type": "boolean", "description": "Set if the end-of-file condition occured while reading." }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "close",
+                "description": "Close the stream, discard any temporary backing storage.",
+                "parameters": [
+                    { "name": "handle", "$ref": "StreamHandle", "description": "Handle of the stream to close." }
+                ],
+                "handlers": ["browser"]
+            }
+        ]
             },
             {
+        "domain": "Timeline",
+        "description": "Timeline domain is deprecated. Please use Tracing instead.",
+        "types": [
+            {
                 "id": "TimelineEvent",
                 "type": "object",
                 "properties": [
@@ -2887,11 +3345,11 @@
         "commands": [
             {
                 "name": "enable",
-                "description": "Enables timeline. After this call, timeline can be started from within the page (for example upon console.timeline)."
+                "description": "Deprecated."
             },
             {
                 "name": "disable",
-                "description": "Disables timeline."
+                "description": "Deprecated."
             },
             {
                 "name": "start",
@@ -2902,11 +3360,11 @@
                     { "name": "includeCounters", "optional": true, "type": "boolean", "hidden": true, "description": "Whether counters data should be included into timeline events." },
                     { "name": "includeGPUEvents", "optional": true, "type": "boolean", "hidden": true, "description": "Whether events from GPU process should be collected." }
                 ],
-                "description": "Starts capturing instrumentation events."
+                "description": "Deprecated."
             },
             {
                 "name": "stop",
-                "description": "Stops capturing instrumentation events."
+                "description": "Deprecated."
             }
         ],
         "events": [
@@ -2915,31 +3373,7 @@
                 "parameters": [
                     { "name": "record", "$ref": "TimelineEvent", "description": "Timeline event record data." }
                 ],
-                "description": "Fired for every instrumentation event while timeline is started."
-            },
-            {
-                "name": "progress",
-                "parameters": [
-                    { "name": "count", "type": "number" }
-                ],
-                "hidden": true
-            },
-            {
-                "name": "started",
-                "parameters": [
-                    { "name": "consoleTimeline", "type": "boolean", "optional": true, "description": "If specified, identifies that timeline was started using console.timeline() call." }
-                ],
-                "description": "Fired when timeline is started.",
-                "hidden": true
-            },
-            {
-                "name": "stopped",
-                "parameters": [
-                    { "name": "consoleTimeline", "type": "boolean", "optional": true, "description": "If specified, identifies that timeline was started using console.timeline() call." },
-                    { "name": "events", "type": "array", "items": { "$ref": "TimelineEvent" }, "optional": true, "hidden": true, "description": "Timeline event record data." }
-                ],
-                "description": "Fired when timeline is stopped.",
-                "hidden": true
+                "description": "Deprecated."
             }
         ]
     },
@@ -2977,18 +3411,42 @@
                 "hidden": true,
                 "type": "object",
                 "properties": [
-                    { "name": "location", "$ref": "Location", "description": "Location of the function." },
+                    { "name": "location", "$ref": "Location", "optional": true, "description": "Location of the function, none for native functions." },
                     { "name": "functionName", "type": "string", "description": "Name of the function." },
+                    { "name": "isGenerator", "type": "boolean", "description": "Whether this is a generator function." },
                     { "name": "scopeChain", "type": "array", "optional": true, "items": { "$ref": "Scope" }, "description": "Scope chain for this closure." }
                 ],
                 "description": "Information about the function."
             },
             {
+                "id": "GeneratorObjectDetails",
+                "hidden": true,
+                "type": "object",
+                "properties": [
+                    { "name": "function", "$ref": "Runtime.RemoteObject", "description": "Generator function." },
+                    { "name": "functionName", "type": "string", "description": "Name of the generator function." },
+                    { "name": "status", "type": "string", "enum": ["running", "suspended", "closed"], "description": "Current generator object status." },
+                    { "name": "location", "$ref": "Location", "optional": true, "description": "If suspended, location where generator function was suspended (e.g. location of the last 'yield'). Otherwise, location of the generator function." }
+                ],
+                "description": "Information about the generator object."
+            },
+            {
+                "id": "CollectionEntry",
+                "hidden": true,
+                "type": "object",
+                "properties": [
+                    { "name": "key", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Entry key of a map-like collection, otherwise not provided." },
+                    { "name": "value", "$ref": "Runtime.RemoteObject", "description": "Entry value." }
+                ],
+                "description": "Collection entry."
+            },
+            {
                 "id": "CallFrame",
                 "type": "object",
                 "properties": [
                     { "name": "callFrameId", "$ref": "CallFrameId", "description": "Call frame identifier. This identifier is only valid while the virtual machine is paused." },
                     { "name": "functionName", "type": "string", "description": "Name of the JavaScript function called on this call frame." },
+                    { "name": "functionLocation", "$ref": "Location", "optional": true, "hidden": true, "description": "Location in the source code." },
                     { "name": "location", "$ref": "Location", "description": "Location in the source code." },
                     { "name": "scopeChain", "type": "array", "items": { "$ref": "Scope" }, "description": "Scope chain for this call frame." },
                     { "name": "this", "$ref": "Runtime.RemoteObject", "description": "<code>this</code> object for this call frame." },
@@ -3011,7 +3469,7 @@
                 "id": "Scope",
                 "type": "object",
                 "properties": [
-                    { "name": "type", "type": "string", "enum": ["global", "local", "with", "closure", "catch"], "description": "Scope type." },
+                    { "name": "type", "type": "string", "enum": ["global", "local", "with", "closure", "catch", "block", "script"], "description": "Scope type." },
                     { "name": "object", "$ref": "Runtime.RemoteObject", "description": "Object representing the scope. For <code>global</code> and <code>with</code> scopes it represents the actual object; for the rest of the scopes, it is artificial transient object enumerating scope variables as its properties." }
                 ],
                 "description": "Scope description."
@@ -3023,6 +3481,7 @@
                 "properties": [
                     { "name": "text", "type": "string", "description": "Exception text." },
                     { "name": "url", "type": "string", "optional": true, "description": "URL of the message origin." },
+                    { "name": "scriptId", "type": "string", "optional": true, "description": "Script ID of the message origin." },
                     { "name": "line", "type": "integer", "optional": true, "description": "Line number in the resource that generated this message." },
                     { "name": "column", "type": "integer", "optional": true, "description": "Column number in the resource that generated this message." },
                     { "name": "stackTrace", "$ref": "Console.StackTrace", "optional": true, "description": "JavaScript stack trace for assertions and error messages." }
@@ -3042,6 +3501,46 @@
                 ],
                 "description": "Error data for setScriptSource command. compileError is a case type for uncompilable script source error.",
                 "hidden": true
+            },
+            {
+                "id": "PromiseDetails",
+                "type": "object",
+                "description": "Information about the promise. All fields but id are optional and if present they reflect the new state of the property on the promise with given id.",
+                "properties": [
+                    { "name": "id", "type": "integer", "description": "Unique id of the promise." },
+                    { "name": "status", "type": "string", "optional": true, "enum": ["pending", "resolved", "rejected"], "description": "Status of the promise." },
+                    { "name": "parentId", "type": "integer", "optional": true, "description": "Id of the parent promise." },
+                    { "name": "callFrame", "$ref": "Console.CallFrame", "optional": true, "description": "Top call frame on promise creation."},
+                    { "name": "creationTime", "type": "number", "optional": true, "description": "Creation time of the promise." },
+                    { "name": "settlementTime", "type": "number", "optional": true, "description": "Settlement time of the promise." },
+                    { "name": "creationStack", "$ref": "Console.StackTrace", "optional": true, "description": "JavaScript stack trace on promise creation." },
+                    { "name": "asyncCreationStack", "$ref": "Console.AsyncStackTrace", "optional": true, "description": "JavaScript asynchronous stack trace on promise creation, if available." },
+                    { "name": "settlementStack", "$ref": "Console.StackTrace", "optional": true, "description": "JavaScript stack trace on promise settlement." },
+                    { "name": "asyncSettlementStack", "$ref": "Console.AsyncStackTrace", "optional": true, "description": "JavaScript asynchronous stack trace on promise settlement, if available." }
+                ],
+                "hidden": true
+            },
+            {
+                "id": "AsyncOperation",
+                "type": "object",
+                "description": "Information about the async operation.",
+                "properties": [
+                    { "name": "id", "type": "integer", "description": "Unique id of the async operation." },
+                    { "name": "description", "type": "string", "description": "String description of the async operation." },
+                    { "name": "stackTrace", "$ref": "Console.StackTrace", "optional": true, "description": "Stack trace where async operation was scheduled." },
+                    { "name": "asyncStackTrace", "$ref": "Console.AsyncStackTrace", "optional": true, "description": "Asynchronous stack trace where async operation was scheduled, if available." }
+                ],
+                "hidden": true
+            },
+            {
+                "id": "SearchMatch",
+                "type": "object",
+                "description": "Search match for resource.",
+                "properties": [
+                    { "name": "lineNumber", "type": "number", "description": "Line number in resource content." },
+                    { "name": "lineContent", "type": "string", "description": "Line with match content." }
+                ],
+                "hidden": true
             }
         ],
         "commands": [
@@ -3064,8 +3563,7 @@
                 "name": "setSkipAllPauses",
                 "hidden": true,
                 "parameters": [
-                    { "name": "skipped", "type": "boolean", "description": "New value for skip pauses state." },
-                    { "name": "untilReload", "type": "boolean", "optional": true, "description": "Whether page reload should set skipped to false." }
+                    { "name": "skipped", "type": "boolean", "description": "New value for skip pauses state." }
                 ],
                 "description": "Makes page not interrupt on any pauses (breakpoint, exception, dom exception etc)."
             },
@@ -3076,8 +3574,7 @@
                     { "name": "url", "type": "string", "optional": true, "description": "URL of the resources to set breakpoint on." },
                     { "name": "urlRegex", "type": "string", "optional": true, "description": "Regex pattern for the URLs of the resources to set breakpoints on. Either <code>url</code> or <code>urlRegex</code> must be specified." },
                     { "name": "columnNumber", "type": "integer", "optional": true, "description": "Offset in the line to set breakpoint at." },
-                    { "name": "condition", "type": "string", "optional": true, "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true." },
-                    { "name": "isAntibreakpoint", "type": "boolean", "optional": true, "hidden": true, "description": "Creates pseudo-breakpoint that prevents debugger from pausing on exception at this location." }
+                    { "name": "condition", "type": "string", "optional": true, "description": "Expression to use as a breakpoint condition. When specified, debugger will only stop on the breakpoint if this expression evaluates to true." }
                 ],
                 "returns": [
                     { "name": "breakpointId", "$ref": "BreakpointId", "description": "Id of the created breakpoint for further reference." },
@@ -3133,6 +3630,11 @@
                 "description": "Resumes JavaScript execution."
             },
             {
+                "name": "stepIntoAsync",
+                "description": "Steps into the first async operation handler that was scheduled by or after the current statement.",
+                "hidden": true
+            },
+            {
                 "name": "searchInContent",
                 "parameters": [
                     { "name": "scriptId", "$ref": "ScriptId", "description": "Id of the script to search in." },
@@ -3141,7 +3643,7 @@
                     { "name": "isRegex", "type": "boolean", "optional": true, "description": "If true, treats string parameter as regex." }
                 ],
                 "returns": [
-                    { "name": "result", "type": "array", "items": { "$ref": "Page.SearchMatch" }, "description": "List of search matches." }
+                    { "name": "result", "type": "array", "items": { "$ref": "SearchMatch" }, "description": "List of search matches." }
                 ],
                 "description": "Searches for given string in script content."
             },
@@ -3161,7 +3663,7 @@
                 ],
                 "returns": [
                     { "name": "callFrames", "type": "array", "optional": true, "items": { "$ref": "CallFrame" }, "description": "New stack trace in case editing has happened while VM was stopped." },
-                    { "name": "result", "type": "object", "optional": true, "description": "VM-specific description of the changes applied.", "hidden": true },
+                    { "name": "stackChanged", "type": "boolean", "optional": true, "description": "Whether current call stack  was modified after applying the changes.", "hidden": true },
                     { "name": "asyncStackTrace", "$ref": "StackTrace", "optional": true, "description": "Async stack trace, if any.", "hidden": true }
                 ],
                 "error": {
@@ -3176,7 +3678,6 @@
                 ],
                 "returns": [
                     { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "New stack trace." },
-                    { "name": "result", "type": "object", "description": "VM-specific description." },
                     { "name": "asyncStackTrace", "$ref": "StackTrace", "optional": true, "description": "Async stack trace, if any." }
                 ],
                 "hidden": true,
@@ -3196,12 +3697,34 @@
                 "name": "getFunctionDetails",
                 "hidden": true,
                 "parameters": [
-                    { "name": "functionId", "$ref": "Runtime.RemoteObjectId", "description": "Id of the function to get location for." }
+                    { "name": "functionId", "$ref": "Runtime.RemoteObjectId", "description": "Id of the function to get details for." }
                 ],
                 "returns": [
                     { "name": "details", "$ref": "FunctionDetails", "description": "Information about the function." }
                 ],
-                "description": "Returns detailed informtation on given function."
+                "description": "Returns detailed information on given function."
+            },
+            {
+                "name": "getGeneratorObjectDetails",
+                "hidden": true,
+                "parameters": [
+                    { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "Id of the generator object to get details for." }
+                ],
+                "returns": [
+                    { "name": "details", "$ref": "GeneratorObjectDetails", "description": "Information about the generator object." }
+                ],
+                "description": "Returns detailed information on given generator object."
+            },
+            {
+                "name": "getCollectionEntries",
+                "hidden": true,
+                "parameters": [
+                    { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "Id of the collection to get entries for." }
+                ],
+                "returns": [
+                    { "name": "entries", "type": "array", "items": { "$ref": "CollectionEntry" }, "description": "Array of collection entries." }
+                ],
+                "description": "Returns entries of given collection."
             },
             {
                 "name": "setPauseOnExceptions",
@@ -3224,7 +3747,7 @@
                 "returns": [
                     { "name": "result", "$ref": "Runtime.RemoteObject", "description": "Object wrapper for the evaluation result." },
                     { "name": "wasThrown", "type": "boolean", "optional": true, "description": "True if the result was thrown during the evaluation." },
-                    { "name": "exceptionDetails", "$ref": "Debugger.ExceptionDetails", "optional": true, "hidden": true, "description": "Exception details."}
+                    { "name": "exceptionDetails", "$ref": "ExceptionDetails", "optional": true, "hidden": true, "description": "Exception details."}
                 ],
                 "description": "Evaluates expression on a given call frame."
             },
@@ -3234,6 +3757,7 @@
                 "parameters": [
                     { "name": "expression", "type": "string", "description": "Expression to compile." },
                     { "name": "sourceURL", "type": "string", "description": "Source url to be set for the script." },
+                    { "name": "persistScript", "type": "boolean", "description": "Specifies whether the compiled script should be persisted." },
                     { "name": "executionContextId", "$ref": "Runtime.ExecutionContextId", "optional": true, "description": "Specifies in which isolated context to perform script run. Each content script lives in an isolated context and this parameter may be used to specify one of those contexts. If the parameter is omitted or 0 the evaluation will be performed in the context of the inspected page." }
                 ],
                 "returns": [
@@ -3258,14 +3782,6 @@
                 "description": "Runs script with given id in a given context."
             },
             {
-                "name": "setOverlayMessage",
-                "parameters": [
-                    { "name": "message", "type": "string", "optional": true, "description": "Overlay message to display when paused in debugger." }
-                ],
-                "hidden": true,
-                "description": "Sets overlay message."
-            },
-            {
                 "name": "setVariableValue",
                 "parameters": [
                     { "name": "scopeNumber", "type": "integer", "description": "0-based number of scope as was listed in scope chain. Only 'local', 'closure' and 'catch' scope types are allowed. Other scopes could be manipulated manually." },
@@ -3300,7 +3816,8 @@
             {
                 "name": "skipStackFrames",
                 "parameters": [
-                    { "name": "script", "optional": true, "type": "string", "description": "Regular expression defining the scripts to ignore while stepping." }
+                    { "name": "script", "type": "string", "optional": true, "description": "Regular expression defining the scripts to ignore while stepping." },
+                    { "name": "skipContentScripts", "type": "boolean", "optional": true, "description": "True, if all content scripts should be ignored." }
                 ],
                 "hidden": true,
                 "description": "Makes backend skip steps in the sources with names matching given pattern. VM will try leave blacklisted scripts by performing 'step in' several times, finally resorting to 'step out' if unsuccessful."
@@ -3312,6 +3829,52 @@
                 ],
                 "hidden": true,
                 "description": "Enables or disables async call stacks tracking."
+            },
+            {
+                "name": "enablePromiseTracker",
+                "parameters": [
+                    { "name": "captureStacks", "type": "boolean", "optional": true, "description": "Whether to capture stack traces for promise creation and settlement events (default: false)." }
+                ],
+                "hidden": true,
+                "description": "Enables promise tracking, information about <code>Promise</code>s created or updated will now be stored on the backend."
+            },
+            {
+                "name": "disablePromiseTracker",
+                "hidden": true,
+                "description": "Disables promise tracking."
+            },
+            {
+                "name": "getPromiseById",
+                "parameters": [
+                    { "name": "promiseId", "type": "integer" },
+                    { "name": "objectGroup", "type": "string", "optional": true, "description": "Symbolic group name that can be used to release multiple objects." }
+                ],
+                "returns": [
+                    { "name": "promise", "$ref": "Runtime.RemoteObject", "description": "Object wrapper for <code>Promise</code> with specified ID, if any." }
+                ],
+                "hidden": true,
+                "description": "Returns <code>Promise</code> with specified ID."
+            },
+            {
+                "name": "flushAsyncOperationEvents",
+                "hidden": true,
+                "description": "Fires pending <code>asyncOperationStarted</code> events (if any), as if a debugger stepping session has just been started."
+            },
+            {
+                "name": "setAsyncOperationBreakpoint",
+                "parameters": [
+                    { "name": "operationId", "type": "integer", "description": "ID of the async operation to set breakpoint for." }
+                ],
+                "hidden": true,
+                "description": "Sets breakpoint on AsyncOperation callback handler."
+            },
+            {
+                "name": "removeAsyncOperationBreakpoint",
+                "parameters": [
+                    { "name": "operationId", "type": "integer", "description": "ID of the async operation to remove breakpoint for." }
+                ],
+                "hidden": true,
+                "description": "Removes AsyncOperation breakpoint."
             }
         ],
         "events": [
@@ -3329,6 +3892,7 @@
                     { "name": "endLine", "type": "integer", "description": "Last line of the script." },
                     { "name": "endColumn", "type": "integer", "description": "Length of the last line of the script." },
                     { "name": "isContentScript", "type": "boolean", "optional": true, "description": "Determines whether this script is a user extension script." },
+                    { "name": "isInternalScript", "type": "boolean", "optional": true, "description": "Determines whether this script is an internal script.", "hidden": true },
                     { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with script (if any)." },
                     { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "True, if this script has sourceURL.", "hidden": true }
                 ],
@@ -3344,6 +3908,7 @@
                     { "name": "endLine", "type": "integer", "description": "Last line of the script." },
                     { "name": "endColumn", "type": "integer", "description": "Length of the last line of the script." },
                     { "name": "isContentScript", "type": "boolean", "optional": true, "description": "Determines whether this script is a user extension script." },
+                    { "name": "isInternalScript", "type": "boolean", "optional": true, "description": "Determines whether this script is an internal script.", "hidden": true },
                     { "name": "sourceMapURL", "type": "string", "optional": true, "description": "URL of source map associated with script (if any)." },
                     { "name": "hasSourceURL", "type": "boolean", "optional": true, "description": "True, if this script has sourceURL.", "hidden": true }
                 ],
@@ -3361,7 +3926,7 @@
                 "name": "paused",
                 "parameters": [
                     { "name": "callFrames", "type": "array", "items": { "$ref": "CallFrame" }, "description": "Call stack the virtual machine stopped on." },
-                    { "name": "reason", "type": "string", "enum": [ "XHR", "DOM", "EventListener", "exception", "assert", "CSPViolation", "debugCommand", "other" ], "description": "Pause reason." },
+                    { "name": "reason", "type": "string", "enum": [ "XHR", "DOM", "EventListener", "exception", "assert", "CSPViolation", "debugCommand", "promiseRejection", "AsyncOperation", "other" ], "description": "Pause reason." },
                     { "name": "data", "type": "object", "optional": true, "description": "Object containing break-specific auxiliary properties." },
                     { "name": "hitBreakpoints", "type": "array", "optional": true, "items": { "type": "string" }, "description": "Hit breakpoints IDs", "hidden": true },
                     { "name": "asyncStackTrace", "$ref": "StackTrace", "optional": true, "description": "Async stack trace, if any.", "hidden": true }
@@ -3371,6 +3936,31 @@
             {
                 "name": "resumed",
                 "description": "Fired when the virtual machine resumed execution."
+            },
+            {
+                "name": "promiseUpdated",
+                "parameters": [
+                    { "name": "eventType", "type": "string", "enum": ["new", "update", "gc"], "description": "Type of the event." },
+                    { "name": "promise", "$ref": "PromiseDetails", "description": "Information about the updated <code>Promise</code>." }
+                ],
+                "description": "Fired when a <code>Promise</code> is created, updated or garbage collected.",
+                "hidden": true
+            },
+            {
+                "name": "asyncOperationStarted",
+                "parameters": [
+                    { "name": "operation", "$ref": "AsyncOperation", "description": "Information about the async operation." }
+                ],
+                "description": "Fired when an async operation is scheduled (while in a debugger stepping session).",
+                "hidden": true
+            },
+            {
+                "name": "asyncOperationCompleted",
+                "parameters": [
+                    { "name": "id", "type": "integer", "description": "ID of the async operation that was completed." }
+                ],
+                "description": "Fired when an async operation is completed (while in a debugger stepping session).",
+                "hidden": true
             }
         ]
     },
@@ -3383,6 +3973,18 @@
                 "type": "string",
                 "enum": ["subtree-modified", "attribute-modified", "node-removed"],
                 "description": "DOM breakpoint type."
+            },
+            {
+                "id": "EventListener",
+                "type": "object",
+                "description": "Object event listener.",
+                "properties": [
+                    { "name": "type", "type": "string", "description": "<code>EventListener</code>'s type." },
+                    { "name": "useCapture", "type": "boolean", "description": "<code>EventListener</code>'s useCapture." },
+                    { "name": "location", "$ref": "Debugger.Location", "description": "Handler code location." },
+                    { "name": "handler", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Event handler function value." }
+                ],
+                "hidden": true
             }
         ],
         "commands": [
@@ -3447,6 +4049,17 @@
                     { "name": "url", "type": "string", "description": "Resource URL substring." }
                 ],
                 "description": "Removes breakpoint from XMLHttpRequest."
+            },
+            {
+                "name": "getEventListeners",
+                "hidden": true,
+                "parameters": [
+                    { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "Identifier of the object to return listeners for." }
+                ],
+                "returns": [
+                    { "name": "listeners", "type": "array", "items": { "$ref": "EventListener" }, "description": "Array of relevant listeners." }
+                ],
+                "description": "Returns event listeners of the given object."
             }
         ]
     },
@@ -3468,7 +4081,8 @@
                     { "name": "callUID", "type": "number", "description": "Call UID." },
                     { "name": "children", "type": "array", "items": { "$ref": "CPUProfileNode" }, "description": "Child nodes." },
                     { "name": "deoptReason", "type": "string", "description": "The reason of being not optimized. The function may be deoptimized or marked as don't optimize."},
-                    { "name": "id", "type": "integer", "description": "Unique id of the node." }
+                    { "name": "id", "type": "integer", "description": "Unique id of the node." },
+                    { "name": "positionTicks", "type": "array", "items": { "$ref": "PositionTickInfo" }, "description": "An array of source position ticks." }
                 ]
             },
             {
@@ -3482,6 +4096,15 @@
                     { "name": "samples", "optional": true, "type": "array", "items": { "type": "integer" }, "description": "Ids of samples top nodes." },
                     { "name": "timestamps", "optional": true, "type": "array", "items": { "type": "number" }, "description": "Timestamps of the samples in microseconds." }
                 ]
+            },
+            {
+                "id": "PositionTickInfo",
+                "type": "object",
+                "description": "Specifies a number of samples attributed to a certain source position.",
+                "properties": [
+                    { "name": "line", "type": "integer", "description": "Source line number (1-based)." },
+                    { "name": "ticks", "type": "integer", "description": "Number of samples attributed to the source line." }
+                ]
             }
         ],
         "commands": [
@@ -3580,6 +4203,13 @@
                 ]
             },
             {
+                "name": "addInspectedHeapObject",
+                "parameters": [
+                    { "name": "heapObjectId", "$ref": "HeapSnapshotObjectId", "description": "Heap snapshot object id to be accessible by means of $x command line API." }
+                ],
+                "description": "Enables console to refer to the node with given id via $x (see Command Line API for more details $x functions)."
+            },
+            {
                 "name": "getHeapObjectId",
                 "parameters": [
                     { "name": "objectId", "$ref": "Runtime.RemoteObjectId", "description": "Identifier of the object to get heap object id for." }
@@ -3638,29 +4268,21 @@
             {
                 "name": "sendMessageToWorker",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" },
-                    { "name": "message", "type": "object" }
-                ]
-            },
-            {
-                "name": "canInspectWorkers",
-                "description": "Tells whether browser supports workers inspection.",
-                "returns": [
-                    { "name": "result", "type": "boolean", "description": "True if browser has workers support." }
+                    { "name": "workerId", "type": "string" },
+                    { "name": "message", "type": "string" }
                 ]
             },
             {
                 "name": "connectToWorker",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" }
+                    { "name": "workerId", "type": "string" }
                 ]
             },
             {
                 "name": "disconnectFromWorker",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" }
-                ],
-                "handlers": ["browser", "renderer"]
+                    { "name": "workerId", "type": "string" }
+                ]
             },
             {
                 "name": "setAutoconnectToWorkers",
@@ -3673,7 +4295,7 @@
             {
                 "name": "workerCreated",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" },
+                    { "name": "workerId", "type": "string" },
                     { "name": "url", "type": "string" },
                     { "name": "inspectorConnected", "type": "boolean" }
                 ]
@@ -3681,211 +4303,236 @@
             {
                 "name": "workerTerminated",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" }
+                    { "name": "workerId", "type": "string" }
                 ]
             },
             {
                 "name": "dispatchMessageFromWorker",
                 "parameters": [
-                    { "name": "workerId", "type": "integer" },
-                    { "name": "message", "type": "object" }
+                    { "name": "workerId", "type": "string" },
+                    { "name": "message", "type": "string" }
                 ]
-            },
-            {
-                "name": "disconnectedFromWorker",
-                "handlers": ["browser"]
             }
         ]
     },
     {
-        "domain": "Canvas",
+        "domain": "ServiceWorker",
         "hidden": true,
         "types": [
             {
-                "id": "ResourceId",
-                "type": "string",
-                "description": "Unique resource identifier."
-            },
-            {
-                "id": "ResourceStateDescriptor",
+                "id": "ServiceWorkerRegistration",
                 "type": "object",
-                "description": "Resource state descriptor.",
+                "description": "ServiceWorker registration.",
                 "properties": [
-                    { "name": "name", "type": "string", "description": "State name." },
-                    { "name": "enumValueForName", "type": "string", "optional": true, "description": "String representation of the enum value, if <code>name</code> stands for an enum." },
-                    { "name": "value", "$ref": "CallArgument", "optional": true, "description": "The value associated with the particular state." },
-                    { "name": "values", "type": "array", "items": { "$ref": "ResourceStateDescriptor" }, "optional": true, "description": "Array of values associated with the particular state. Either <code>value</code> or <code>values</code> will be specified." },
-                    { "name": "isArray", "type": "boolean", "optional": true, "description": "True iff the given <code>values</code> items stand for an array rather than a list of grouped states." }
+                    { "name": "registrationId", "type": "string" },
+                    { "name": "scopeURL", "type": "string" },
+                    { "name": "isDeleted", "type": "boolean", "optional": true }
                 ]
             },
             {
-                "id": "ResourceState",
-                "type": "object",
-                "description": "Resource state.",
-                "properties": [
-                    { "name": "id", "$ref": "ResourceId" },
-                    { "name": "traceLogId", "$ref": "TraceLogId" },
-                    { "name": "descriptors", "type": "array", "items": { "$ref": "ResourceStateDescriptor" }, "optional": true, "description": "Describes current <code>Resource</code> state." },
-                    { "name": "imageURL", "type": "string", "optional": true, "description": "Screenshot image data URL." }
-                ]
+                "id": "ServiceWorkerVersionRunningStatus",
+                "type": "string",
+                "enum": ["stopped", "starting", "running", "stopping"]
             },
             {
-                "id": "CallArgument",
+                "id": "ServiceWorkerVersionStatus",
+                "type": "string",
+                "enum": ["new", "installing", "installed", "activating", "activated", "redundant"]
+            },
+            {
+                "id": "TargetID",
+                "type": "string"
+            },
+            {
+                "id": "ServiceWorkerVersion",
                 "type": "object",
+                "description": "ServiceWorker version.",
                 "properties": [
-                    { "name": "description", "type": "string", "description": "String representation of the object." },
-                    { "name": "enumName", "type": "string", "optional": true, "description": "Enum name, if any, that stands for the value (for example, a WebGL enum name)." },
-                    { "name": "resourceId", "$ref": "ResourceId", "optional": true, "description": "Resource identifier. Specified for <code>Resource</code> objects only." },
-                    { "name": "type", "type": "string", "optional": true, "enum": ["object", "function", "undefined", "string", "number", "boolean"], "description": "Object type. Specified for non <code>Resource</code> objects only." },
-                    { "name": "subtype", "type": "string", "optional": true, "enum": ["array", "null", "node", "regexp", "date"], "description": "Object subtype hint. Specified for <code>object</code> type values only." },
-                    { "name": "remoteObject", "$ref": "Runtime.RemoteObject", "optional": true, "description": "The <code>RemoteObject</code>, if requested." }
+                    { "name": "versionId", "type": "string" },
+                    { "name": "registrationId", "type": "string" },
+                    { "name": "scriptURL", "type": "string" },
+                    { "name": "runningStatus", "$ref": "ServiceWorkerVersionRunningStatus" },
+                    { "name": "status", "$ref": "ServiceWorkerVersionStatus" },
+                    { "name": "scriptLastModified", "type": "number", "optional": true, "description": "The Last-Modified header value of the main script." },
+                    { "name": "scriptResponseTime", "type": "number", "optional": true, "description": "The time at which the response headers of the main script were received from the server.  For cached script it is the last time the cache entry was validated." },
+                    { "name": "controlledClients", "type": "array", "optional": true, "items": { "$ref": "TargetID" } }
                 ]
             },
             {
-                "id": "Call",
+                "id": "ServiceWorkerErrorMessage",
                 "type": "object",
+                "description": "ServiceWorker error message.",
                 "properties": [
-                    { "name": "contextId", "$ref": "ResourceId" },
-                    { "name": "functionName", "type": "string", "optional": true },
-                    { "name": "arguments", "type": "array", "items": { "$ref": "CallArgument" }, "optional": true },
-                    { "name": "result", "$ref": "CallArgument", "optional": true },
-                    { "name": "isDrawingCall", "type": "boolean", "optional": true },
-                    { "name": "isFrameEndCall", "type": "boolean", "optional": true },
-                    { "name": "property", "type": "string", "optional": true },
-                    { "name": "value", "$ref": "CallArgument", "optional": true },
-                    { "name": "sourceURL", "type": "string", "optional": true },
-                    { "name": "lineNumber", "type": "integer", "optional": true },
-                    { "name": "columnNumber", "type": "integer", "optional": true }
+                    { "name": "errorMessage", "type": "string" },
+                    { "name": "registrationId", "type": "string" },
+                    { "name": "versionId", "type": "string" },
+                    { "name": "sourceURL", "type": "string" },
+                    { "name": "lineNumber", "type": "integer" },
+                    { "name": "columnNumber", "type": "integer" }
                 ]
             },
             {
-                "id": "TraceLogId",
-                "type": "string",
-                "description": "Unique trace log identifier."
-            },
-            {
-                "id": "TraceLog",
+                "id": "TargetInfo",
                 "type": "object",
                 "properties": [
-                    { "name": "id", "$ref": "TraceLogId" },
-                    { "name": "calls", "type": "array", "items": { "$ref": "Call" } },
-                    { "name": "contexts", "type": "array", "items": { "$ref": "CallArgument" } },
-                    { "name": "startOffset", "type": "integer" },
-                    { "name": "alive", "type": "boolean" },
-                    { "name": "totalAvailableCalls", "type": "number" }
+                    { "name": "id", "$ref": "TargetID" },
+                    { "name": "type", "type": "string" },
+                    { "name": "title", "type": "string" },
+                    { "name": "url", "type": "string" }
                 ]
             }
         ],
         "commands": [
             {
                 "name": "enable",
-                "description": "Enables Canvas inspection."
+                "handlers": ["browser"]
             },
             {
                 "name": "disable",
-                "description": "Disables Canvas inspection."
+                "handlers": ["browser"]
+            },
+            {
+                "name": "sendMessage",
+                "parameters": [
+                    { "name": "workerId", "type": "string" },
+                    { "name": "message", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "stop",
+                "parameters": [
+                    { "name": "workerId", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "unregister",
+                "parameters": [
+                    { "name": "scopeURL", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "updateRegistration",
+                "parameters": [
+                    { "name": "scopeURL", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "startWorker",
+                "parameters": [
+                    { "name": "scopeURL", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "stopWorker",
+                "parameters": [
+                    { "name": "versionId", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "inspectWorker",
+                "parameters": [
+                    { "name": "versionId", "type": "string" }
+                ],
+                "handlers": ["browser"]
+            },
+            {
+                "name": "skipWaiting",
+                "parameters": [
+                    { "name": "versionId", "type": "string" }
+                ],
+                "handlers": ["browser"]
             },
             {
-                "name": "dropTraceLog",
+                "name": "setDebugOnStart",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" }
-                ]
+                    { "name": "debugOnStart", "type": "boolean" }
+                ],
+                "handlers": ["browser"]
             },
             {
-                "name": "hasUninstrumentedCanvases",
-                "returns": [
-                    { "name": "result", "type": "boolean" }
+                "name": "deliverPushMessage",
+                "parameters": [
+                    { "name": "origin", "type": "string" },
+                    { "name": "registrationId", "type": "string" },
+                    { "name": "data", "type": "string" }
                 ],
-                "description": "Checks if there is any uninstrumented canvas in the inspected page."
+                "handlers": ["browser"]
             },
             {
-                "name": "captureFrame",
+                "name": "getTargetInfo",
                 "parameters": [
-                    { "name": "frameId", "$ref": "Page.FrameId", "optional": true, "description": "Identifier of the frame containing document whose canvases are to be captured. If omitted, main frame is assumed." }
+                    { "name": "targetId", "$ref": "TargetID" }
                 ],
                 "returns": [
-                    { "name": "traceLogId", "$ref": "TraceLogId", "description": "Identifier of the trace log containing captured canvas calls." }
+                    { "name": "targetInfo","$ref": "TargetInfo" }
                 ],
-                "description": "Starts (or continues) a canvas frame capturing which will be stopped automatically after the next frame is prepared."
+                "handlers": ["browser"]
             },
             {
-                "name": "startCapturing",
+                "name": "activateTarget",
                 "parameters": [
-                    { "name": "frameId", "$ref": "Page.FrameId", "optional": true, "description": "Identifier of the frame containing document whose canvases are to be captured. If omitted, main frame is assumed." }
+                    { "name": "targetId", "$ref": "TargetID" }
                 ],
-                "returns": [
-                    { "name": "traceLogId", "$ref": "TraceLogId", "description": "Identifier of the trace log containing captured canvas calls." }
+                "handlers": ["browser"]
+            }
                 ],
-                "description": "Starts (or continues) consecutive canvas frames capturing. The capturing is stopped by the corresponding stopCapturing command."
-            },
+        "events": [
             {
-                "name": "stopCapturing",
+                "name": "workerCreated",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" }
-                ]
+                    { "name": "workerId", "type": "string" },
+                    { "name": "url", "type": "string" }
+                ],
+                "handlers": ["browser"]
             },
             {
-                "name": "getTraceLog",
+                "name": "workerTerminated",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" },
-                    { "name": "startOffset", "type": "integer", "optional": true },
-                    { "name": "maxLength", "type": "integer", "optional": true }
+                    { "name": "workerId", "type": "string" }
                 ],
-                "returns": [
-                    { "name": "traceLog", "$ref": "TraceLog" }
-                ]
+                "handlers": ["browser"]
             },
             {
-                "name": "replayTraceLog",
+                "name": "dispatchMessage",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" },
-                    { "name": "stepNo", "type": "integer", "description": "Last call index in the trace log to replay (zero based)." }
+                    { "name": "workerId", "type": "string" },
+                    { "name": "message", "type": "string" }
                 ],
-                "returns": [
-                    { "name": "resourceState", "$ref": "ResourceState" },
-                    { "name": "replayTime", "type": "number", "description": "Replay time (in milliseconds)." }
-                ]
+                "handlers": ["browser"]
             },
             {
-                "name": "getResourceState",
+                "name": "workerRegistrationUpdated",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" },
-                    { "name": "resourceId", "$ref": "ResourceId" }
+                    { "name": "registrations", "type": "array", "items": { "$ref": "ServiceWorkerRegistration" } }
                 ],
-                "returns": [
-                    { "name": "resourceState", "$ref": "ResourceState" }
-                ]
+                "handlers": ["browser"]
             },
             {
-                "name": "evaluateTraceLogCallArgument",
+                "name": "workerVersionUpdated",
                 "parameters": [
-                    { "name": "traceLogId", "$ref": "TraceLogId" },
-                    { "name": "callIndex", "type": "integer", "description": "Index of the call to evaluate on (zero based)." },
-                    { "name": "argumentIndex", "type": "integer", "description": "Index of the argument to evaluate (zero based). Provide <code>-1</code> to evaluate call result." },
-                    { "name": "objectGroup", "type": "string", "optional": true, "description": "String object group name to put result into (allows rapid releasing resulting object handles using <code>Runtime.releaseObjectGroup</code>)." }
-                ],
-                "returns": [
-                    { "name": "result", "$ref": "Runtime.RemoteObject", "optional": true, "description": "Object wrapper for the evaluation result." },
-                    { "name": "resourceState", "$ref": "ResourceState", "optional": true, "description": "State of the <code>Resource</code> object." }
-                ],
-                "description": "Evaluates a given trace call argument or its result."
-            }
+                    { "name": "versions", "type": "array", "items": { "$ref": "ServiceWorkerVersion" } }
         ],
-        "events": [
+                "handlers": ["browser"]
+            },
             {
-                "name": "contextCreated",
+                "name": "workerErrorReported",
                 "parameters": [
-                    { "name": "frameId", "$ref": "Page.FrameId", "description": "Identifier of the frame containing a canvas with a context." }
+                    { "name": "errorMessage", "$ref": "ServiceWorkerErrorMessage" }
                 ],
-                "description": "Fired when a canvas context has been created in the given frame. The context may not be instrumented (see hasUninstrumentedCanvases command)."
+                "handlers": ["browser"]
             },
             {
-                "name": "traceLogsRemoved",
+                "name": "debugOnStartUpdated",
                 "parameters": [
-                    { "name": "frameId", "$ref": "Page.FrameId", "optional": true, "description": "If given, trace logs from the given frame were removed." },
-                    { "name": "traceLogId", "$ref": "TraceLogId", "optional": true, "description": "If given, trace log with the given ID was removed." }
+                    { "name": "debugOnStart", "type": "boolean" }
                 ],
-                "description": "Fired when a set of trace logs were removed from the backend. If no parameters are given, all trace logs were removed."
+                "handlers": ["browser"]
             }
         ]
     },
@@ -3906,6 +4553,12 @@
                     { "name": "force", "type": "number", "optional": true, "description": "Force (default: 1.0)."},
                     { "name": "id", "type": "number", "optional": true, "description": "Identifier used to track touch sources between events, must be unique within an event."}
                 ]
+            },
+            {
+                "id": "GestureSourceType",
+                "type": "string",
+                "hidden": true,
+                "enum": ["default", "touch", "mouse"]
             }
         ],
         "commands": [
@@ -3918,13 +4571,16 @@
                     { "name": "text", "type": "string", "optional": true, "description": "Text as generated by processing a virtual key code with a keyboard layout. Not needed for for <code>keyUp</code> and <code>rawKeyDown</code> events (default: \"\")" },
                     { "name": "unmodifiedText", "type": "string", "optional": true, "description": "Text that would have been generated by the keyboard if no modifiers were pressed (except for shift). Useful for shortcut (accelerator) key handling (default: \"\")." },
                     { "name": "keyIdentifier", "type": "string", "optional": true, "description": "Unique key identifier (e.g., 'U+0041') (default: \"\")." },
+                    { "name": "code", "type": "string", "optional": true, "description": "Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: \"\")." },
+                    { "name": "key", "type": "string", "optional": true, "description": "Unique DOM defined string value describing the meaning of the key in the context of active modifiers, keyboard layout, etc (e.g., 'AltGr') (default: \"\")." },
                     { "name": "windowsVirtualKeyCode", "type": "integer", "optional": true, "description": "Windows virtual key code (default: 0)." },
                     { "name": "nativeVirtualKeyCode", "type": "integer", "optional": true, "description": "Native virtual key code (default: 0)." },
                     { "name": "autoRepeat", "type": "boolean", "optional": true, "description": "Whether the event was generated from auto repeat (default: false)." },
                     { "name": "isKeypad", "type": "boolean", "optional": true, "description": "Whether the event was generated from the keypad (default: false)." },
                     { "name": "isSystemKey", "type": "boolean", "optional": true, "description": "Whether the event was a system key event (default: false)." }
                 ],
-                "description": "Dispatches a key event to the page."
+                "description": "Dispatches a key event to the page.",
+                "handlers": ["browser"]
             },
             {
                 "name": "dispatchMouseEvent",
@@ -3935,11 +4591,10 @@
                     { "name": "modifiers", "type": "integer", "optional": true, "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0)." },
                     { "name": "timestamp", "type": "number", "optional": true, "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time)." },
                     { "name": "button", "type": "string", "enum": ["none", "left", "middle", "right"], "optional": true, "description": "Mouse button (default: \"none\")." },
-                    { "name": "clickCount", "type": "integer", "optional": true, "description": "Number of times the mouse button was clicked (default: 0)." },
-                    { "name": "deviceSpace", "type": "boolean", "optional": true, "hidden": true, "description": "If true, x and y are given in dip wrt current viewport." }
+                    { "name": "clickCount", "type": "integer", "optional": true, "description": "Number of times the mouse button was clicked (default: 0)." }
                 ],
                 "description": "Dispatches a mouse event to the page.",
-                "handlers": ["browser", "renderer"]
+                "handlers": ["browser"]
             },
             {
                 "name": "dispatchTouchEvent",
@@ -3953,36 +4608,70 @@
                 "description": "Dispatches a touch event to the page."
             },
             {
-                "name": "dispatchGestureEvent",
-                "hidden": true,
-                "parameters": [
-                    { "name": "type", "type": "string", "enum": ["scrollBegin", "scrollEnd", "scrollUpdate", "tapDown", "tap", "pinchBegin", "pinchEnd", "pinchUpdate"], "description": "Type of the gesture event." },
-                    { "name": "x", "type": "integer", "description": "X coordinate relative to the screen's viewport."},
-                    { "name": "y", "type": "integer", "description": "Y coordinate relative to the screen's viewport."},
-                    { "name": "timestamp", "type": "number", "optional": true, "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time)." },
-                    { "name": "deltaX", "type": "integer", "optional": true, "description": "Delta X where apllies."},
-                    { "name": "deltaY", "type": "integer", "optional": true, "description": "Delta Y where apllies."},
-                    { "name": "pinchScale", "type": "number", "optional": true, "description": "Pinch scale." }
-                ],
-                "description": "Dispatches a gesture event to the page.",
-                "handlers": ["browser"]
-            },
-            {
                 "name": "emulateTouchFromMouseEvent",
                 "hidden": true,
                 "parameters": [
                     { "name": "type", "type": "string", "enum": ["mousePressed", "mouseReleased", "mouseMoved", "mouseWheel"], "description": "Type of the mouse event." },
                     { "name": "x", "type": "integer", "description": "X coordinate of the mouse pointer in DIP."},
                     { "name": "y", "type": "integer", "description": "Y coordinate of the mouse pointer in DIP."},
+                    { "name": "timestamp", "type": "number", "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970." },
+                    { "name": "button", "type": "string", "enum": ["none", "left", "middle", "right"], "description": "Mouse button." },
                     { "name": "deltaX", "type": "number", "optional": true, "description": "X delta in DIP for mouse wheel event (default: 0)."},
                     { "name": "deltaY", "type": "number", "optional": true, "description": "Y delta in DIP for mouse wheel event (default: 0)."},
                     { "name": "modifiers", "type": "integer", "optional": true, "description": "Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8 (default: 0)." },
-                    { "name": "timestamp", "type": "number", "optional": true, "description": "Time at which the event occurred. Measured in UTC time in seconds since January 1, 1970 (default: current time)." },
-                    { "name": "button", "type": "string", "enum": ["none", "left", "middle", "right"], "optional": true, "description": "Mouse button (default: \"none\")." },
                     { "name": "clickCount", "type": "integer", "optional": true, "description": "Number of times the mouse button was clicked (default: 0)." }
                 ],
                 "description": "Emulates touch event from the mouse event parameters.",
                 "handlers": ["browser"]
+            },
+            {
+                "name": "synthesizePinchGesture",
+                "async": true,
+                "parameters": [
+                    { "name": "x", "type": "integer", "description": "X coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "y", "type": "integer", "description": "Y coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "scaleFactor", "type": "number", "description": "Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out)." },
+                    { "name": "relativeSpeed", "type": "integer", "optional": true, "description": "Relative pointer speed in pixels per second (default: 800)." },
+                    { "name": "gestureSourceType", "$ref": "GestureSourceType", "optional": true, "description": "Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type)." }
+                ],
+                "description": "Synthesizes a pinch gesture over a time period by issuing appropriate touch events.",
+                "hidden": true,
+                "handlers": ["browser"]
+            },
+            {
+                "name": "synthesizeScrollGesture",
+                "async": true,
+                "parameters": [
+                    { "name": "x", "type": "integer", "description": "X coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "y", "type": "integer", "description": "Y coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "xDistance", "type": "integer", "optional": true, "description": "The distance to scroll along the X axis (positive to scroll left)." },
+                    { "name": "yDistance", "type": "integer", "optional": true, "description": "The distance to scroll along the Y axis (positive to scroll up)." },
+                    { "name": "xOverscroll", "type": "integer", "optional": true, "description": "The number of additional pixels to scroll back along the X axis, in addition to the given distance." },
+                    { "name": "yOverscroll", "type": "integer", "optional": true, "description": "The number of additional pixels to scroll back along the Y axis, in addition to the given distance." },
+                    { "name": "preventFling", "type": "boolean", "optional": true, "description": "Prevent fling (default: true)." },
+                    { "name": "speed", "type": "integer", "optional": true, "description": "Swipe speed in pixels per second (default: 800)." },
+                    { "name": "gestureSourceType", "$ref": "GestureSourceType", "optional": true, "description": "Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type)." },
+                    { "name": "repeatCount", "type": "integer", "optional": true, "description": "The number of times to repeat the gesture (default: 0)." },
+                    { "name": "repeatDelayMs", "type": "integer", "optional": true, "description": "The number of milliseconds delay between each repeat. (default: 250)." },
+                    { "name": "interactionMarkerName", "type": "string", "optional": true, "description": "The name of the interaction markers to generate, if not empty (default: \"\")." }
+                ],
+                "description": "Synthesizes a scroll gesture over a time period by issuing appropriate touch events.",
+                "hidden": true,
+                "handlers": ["browser"]
+            },
+            {
+                "name": "synthesizeTapGesture",
+                "async": true,
+                "parameters": [
+                    { "name": "x", "type": "integer", "description": "X coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "y", "type": "integer", "description": "Y coordinate of the start of the gesture in CSS pixels." },
+                    { "name": "duration", "type": "integer", "optional": true, "description": "Duration between touchdown and touchup events in ms (default: 50)." },
+                    { "name": "tapCount", "type": "integer", "optional": true, "description": "Number of times to perform the tap (e.g. 2 for double tap, default: 1)." },
+                    { "name": "gestureSourceType", "$ref": "GestureSourceType", "optional": true, "description": "Which type of input events to be generated (default: 'default', which queries the platform for the preferred input type)." }
+                ],
+                "description": "Synthesizes a tap gesture over a time period by issuing appropriate touch events.",
+                "hidden": true,
+                "handlers": ["browser"]
             }
         ],
         "events": []
@@ -3994,7 +4683,7 @@
             {
                 "id": "LayerId",
                 "type": "string",
-                "description": "Unique RenderLayer identifier."
+                "description": "Unique Layer identifier."
             },
             {
                 "id": "SnapshotId",
@@ -4011,6 +4700,16 @@
                 ]
             },
             {
+                "id": "PictureTile",
+                "type": "object",
+                "description": "Serialized fragment of layer picture along with its offset within the layer.",
+                "properties": [
+                    { "name": "x", "type": "number", "description": "Offset from owning layer left boundary" },
+                    { "name": "y", "type": "number", "description": "Offset from owning layer top boundary" },
+                    { "name": "picture", "type": "string", "description": "Base64-encoded snapshot data." }
+                ]
+            },
+            {
                 "id": "Layer",
                 "type": "object",
                 "description": "Information about a compositing layer.",
@@ -4027,6 +4726,7 @@
                     { "name": "anchorY", "type": "number", "optional": true, "description": "Transform anchor point Y, absent if no transform specified" },
                     { "name": "anchorZ", "type": "number", "optional": true, "description": "Transform anchor point Z, absent if no transform specified" },
                     { "name": "paintCount", "type": "integer", "description": "Indicates how many time this layer has painted." },
+                    { "name": "drawsContent", "type": "boolean", "description": "Indicates whether this layer hosts any content, rather than being used for transform/scrolling purposes only." },
                     { "name": "invisible", "type": "boolean", "optional": true, "description": "Set if layer is not visible." },
                     { "name": "scrollRects", "type": "array", "items": { "$ref": "ScrollRect"}, "optional": true, "description": "Rectangles scrolling on main thread only."}
                 ]
@@ -4073,7 +4773,7 @@
             {
                 "name": "loadSnapshot",
                 "parameters": [
-                    { "name": "data", "type": "string", "description": "Base64-encoded snapshot data." }
+                    { "name": "tiles", "type": "array", "items": { "$ref": "PictureTile" }, "minItems": 1, "description": "An array of tiles composing the snapshot." }
                 ],
                 "description": "Returns the snapshot identifier.",
                 "returns": [
@@ -4092,7 +4792,8 @@
                 "parameters": [
                     { "name": "snapshotId", "$ref": "SnapshotId", "description": "The id of the layer snapshot." },
                     { "name": "minRepeatCount", "type": "integer", "optional": true, "description": "The maximum number of times to replay the snapshot (1, if not specified)." },
-                    { "name": "minDuration", "type": "number", "optional": true, "description": "The minimum duration (in seconds) to replay the snapshot." }
+                    { "name": "minDuration", "type": "number", "optional": true, "description": "The minimum duration (in seconds) to replay the snapshot." },
+                    { "name": "clipRect", "$ref": "DOM.Rect", "optional": true, "description": "The clip rectangle to apply when replaying the snapshot." }
                 ],
                 "returns": [
                     { "name": "timings", "type": "array", "items": { "$ref": "PaintProfile" }, "description": "The array of paint profiles, one per run." }
@@ -4139,72 +4840,89 @@
         ]
     },
     {
-        "domain": "Geolocation",
+        "domain": "DeviceOrientation",
         "hidden": true,
         "commands": [
             {
-                "name": "setGeolocationOverride",
-                "description": "Overrides the Geolocation Position or Error.",
+                "name": "setDeviceOrientationOverride",
+                "description": "Overrides the Device Orientation.",
                 "parameters": [
-                    { "name": "latitude", "type": "number", "optional": true, "description": "Mock latitude"},
-                    { "name": "longitude", "type": "number", "optional": true, "description": "Mock longitude"},
-                    { "name": "accuracy", "type": "number", "optional": true, "description": "Mock accuracy"}
+                    { "name": "alpha", "type": "number", "description": "Mock alpha"},
+                    { "name": "beta", "type": "number", "description": "Mock beta"},
+                    { "name": "gamma", "type": "number", "description": "Mock gamma"}
                 ]
             },
             {
-                "name": "clearGeolocationOverride",
-                "description": "Clears the overriden Geolocation Position and Error."
+                "name": "clearDeviceOrientationOverride",
+                "description": "Clears the overridden Device Orientation."
             }
         ]
     },
     {
-        "domain": "DeviceOrientation",
+        "domain": "ScreenOrientation",
         "hidden": true,
+        "types": [
+            {
+                "id": "OrientationType",
+                "type": "string",
+                "enum": ["portraitPrimary", "portraitSecondary", "landscapePrimary", "landscapeSecondary"],
+                "description": "Orientation type"
+            }
+        ],
         "commands": [
             {
-                "name": "setDeviceOrientationOverride",
-                "description": "Overrides the Device Orientation.",
+                "name": "setScreenOrientationOverride",
+                "description": "Overrides the Screen Orientation.",
                 "parameters": [
-                    { "name": "alpha", "type": "number", "description": "Mock alpha"},
-                    { "name": "beta", "type": "number", "description": "Mock beta"},
-                    { "name": "gamma", "type": "number", "description": "Mock gamma"}
+                    { "name": "angle", "type": "integer", "description": "Orientation angle" },
+                    { "name": "type", "$ref": "OrientationType", "description": "Orientation type" }
                 ]
             },
             {
-                "name": "clearDeviceOrientationOverride",
-                "description": "Clears the overridden Device Orientation."
+                "name": "clearScreenOrientationOverride",
+                "description": "Clears the overridden Screen Orientation."
             }
         ]
     },
     {
         "domain": "Tracing",
-        "hidden": true,
         "commands": [
             {
                 "name": "start",
+                "async": true,
                 "description": "Start trace events collection.",
                 "parameters": [
-                    { "name": "categories", "type": "string", "description": "Category/tag filter" },
-                    { "name": "options", "type": "string", "description": "Tracing options" },
-                    { "name": "bufferUsageReportingInterval", "type": "number", "optional": true, "description": "If set, the agent will issue bufferUsage events at this interval, specified in milliseconds" }
+                    { "name": "categories", "type": "string", "optional": true, "description": "Category/tag filter" },
+                    { "name": "options", "type": "string", "optional": true, "description": "Tracing options" },
+                    { "name": "bufferUsageReportingInterval", "type": "number", "optional": true, "description": "If set, the agent will issue bufferUsage events at this interval, specified in milliseconds" },
+                    { "name": "transferMode", "type": "string", "enum": ["ReportEvents", "ReturnAsStream"], "optional": true, "description": "Whether to report trace events as series of dataCollected events or to save trace to a stream (defaults to <code>ReportEvents</code>)." }
                 ],
-                "returns": [
-                    { "name": "sessionId", "type": "string", "description": "A system-unique identifier of the tracing session that allows associating of some of the trace events with the inspected page" }
-                ],
-                "handlers": ["browser", "renderer", "frontend"]
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "end",
+                "async": true,
                 "description": "Stop trace events collection.",
-                "handlers": ["browser", "frontend"]
+                "handlers": ["browser", "renderer"]
             },
             {
                 "name": "getCategories",
+                "async": true,
                 "description": "Gets supported tracing categories.",
                 "returns": [
                     { "name": "categories", "type": "array", "items": { "type": "string" }, "description": "A list of supported tracing categories." }
                 ],
-                "handlers": ["browser", "frontend"]
+                "handlers": ["browser"]
+            },
+            {
+                "name": "requestMemoryDump",
+                "async": true,
+                "description": "Request a global memory dump.",
+                "returns": [
+                    { "name": "dumpGuid", "type": "string", "description": "GUID of the resulting global memory dump." },
+                    { "name": "success", "type": "boolean", "description": "True iff the global memory dump succeeded." }
+                ],
+                "handlers": ["browser"]
             }
         ],
         "events": [
@@ -4213,20 +4931,25 @@
                 "parameters": [
                     { "name": "value", "type": "array", "items": { "type": "object" } }
                 ],
-                "description": "Contains an bucket of collected trace events.",
-                "handlers": ["browser", "frontend"]
+                "description": "Contains an bucket of collected trace events. When tracing is stopped collected events will be send as a sequence of dataCollected events followed by tracingComplete event.",
+                "handlers": ["browser"]
             },
             {
                 "name": "tracingComplete",
                 "description": "Signals that tracing is stopped and there is no trace buffers pending flush, all data were delivered via dataCollected events.",
-                "handlers": ["browser", "frontend"]
+                "parameters": [
+                    { "name": "stream", "$ref": "IO.StreamHandle", "optional": true, "description": "A handle of the stream that holds resulting trace data." }
+                ],
+                "handlers": ["browser"]
             },
             {
                 "name": "bufferUsage",
                 "parameters": [
-                    { "name": "value", "type": "number", "description": "A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size." }
+                    { "name": "percentFull", "type": "number", "optional": true, "description": "A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size." },
+                    { "name": "eventCount", "type": "number", "optional": true, "description": "An approximate number of events in the trace log." },
+                    { "name": "value", "type": "number", "optional": true, "description": "A number in range [0..1] that indicates the used size of event buffer as a fraction of its total size." }
                 ],
-                "handlers": ["browser", "frontend"]
+                "handlers": ["browser"]
             }
         ]
     },
@@ -4283,6 +5006,247 @@
                     {"name": "value", "type": "array", "items": { "$ref": "PowerEvent" }, "description": "List of power events." }
                 ],
                 "handlers": ["browser", "frontend"]
+            }
+        ]
+    },
+    {
+        "domain": "Animation",
+        "hidden": true,
+        "types": [
+            {
+                "id": "Animation",
+                "type": "object",
+                "hidden": true,
+                "properties": [
+                    { "name": "id", "type": "string", "description": "<code>Animation</code>'s id." },
+                    { "name": "pausedState", "type": "boolean", "hidden": "true", "description": "<code>Animation</code>'s internal paused state." },
+                    { "name": "playState", "type": "string", "description": "<code>Animation</code>'s play state." },
+                    { "name": "playbackRate", "type": "number", "description": "<code>Animation</code>'s playback rate." },
+                    { "name": "startTime", "type": "number", "description": "<code>Animation</code>'s start time." },
+                    { "name": "currentTime", "type": "number", "description": "<code>Animation</code>'s current time." },
+                    { "name": "source", "$ref": "AnimationEffect", "description": "<code>Animation</code>'s source animation node." },
+                    { "name": "type", "type": "string", "enum": ["CSSTransition", "CSSAnimation", "WebAnimation"], "description": "Animation type of <code>Animation</code>." }
+                ],
+                "description": "Animation instance."
+            },
+            {
+                "id": "AnimationEffect",
+                "type": "object",
+                "hidden": true,
+                "properties": [
+                    { "name": "delay", "type": "number", "description": "<code>AnimationEffect</code>'s delay." },
+                    { "name": "endDelay", "type": "number", "description": "<code>AnimationEffect</code>'s end delay." },
+                    { "name": "playbackRate", "type": "number", "description": "<code>AnimationEffect</code>'s playbackRate." },
+                    { "name": "iterationStart", "type": "number", "description": "<code>AnimationEffect</code>'s iteration start." },
+                    { "name": "iterations", "type": "number", "description": "<code>AnimationEffect</code>'s iterations." },
+                    { "name": "duration", "type": "number", "description": "<code>AnimationEffect</code>'s iteration duration." },
+                    { "name": "direction", "type": "string", "description": "<code>AnimationEffect</code>'s playback direction." },
+                    { "name": "fill", "type": "string", "description": "<code>AnimationEffect</code>'s fill mode." },
+                    { "name": "name", "type": "string", "description": "<code>AnimationEffect</code>'s name." },
+                    { "name": "backendNodeId", "$ref": "DOM.BackendNodeId", "description": "<code>AnimationEffect</code>'s target node." },
+                    { "name": "keyframesRule", "$ref": "KeyframesRule", "optional": true, "description": "<code>AnimationEffect</code>'s keyframes." },
+                    { "name": "easing", "type": "string", "description": "<code>AnimationEffect</code>'s timing function." }
+                ],
+                "description": "AnimationEffect instance"
+            },
+            {
+                "id": "KeyframesRule",
+                "type": "object",
+                "properties": [
+                    { "name": "name", "type": "string", "optional": true, "description": "CSS keyframed animation's name." },
+                    { "name": "keyframes", "type": "array", "items": { "$ref": "KeyframeStyle" }, "description": "List of animation keyframes." }
+                ],
+                "description": "Keyframes Rule"
+            },
+            {
+                "id": "KeyframeStyle",
+                "type": "object",
+                "properties": [
+                    { "name": "offset", "type": "string", "description": "Keyframe's time offset." },
+                    { "name": "easing", "type": "string", "description": "<code>AnimationEffect</code>'s timing function." }
+                ],
+                "description": "Keyframe Style"
+            }
+        ],
+        "commands": [
+            {
+                "name": "enable",
+                "description": "Enables animation domain notifications."
+            },
+            {
+                "name": "disable",
+                "description": "Disables animation domain notifications."
+            },
+            {
+                "name": "getPlaybackRate",
+                "returns": [
+                    { "name": "playbackRate", "type": "number", "description": "Playback rate for animations on page."}
+                ],
+                "description": "Gets the playback rate of the document timeline."
+            },
+            {
+                "name": "setPlaybackRate",
+                "parameters": [
+                    { "name": "playbackRate", "type": "number", "description": "Playback rate for animations on page" }
+                ],
+                "description": "Sets the playback rate of the document timeline."
+            },
+            {
+                "name": "setCurrentTime",
+                "parameters": [
+                    { "name": "currentTime", "type": "number", "description": "Current time for the page animation timeline" }
+                ],
+                "description": "Sets the current time of the document timeline."
+            },
+            {
+                "name": "setTiming",
+                "parameters": [
+                    { "name": "playerId", "type": "string", "description": "AnimationPlayer id." },
+                    { "name": "duration", "type": "number", "description": "Duration of the animation." },
+                    { "name": "delay", "type": "number", "description": "Delay of the animation." }
+                ],
+                "description": "Sets the timing of an animation node."
+            }
+        ],
+        "events": [
+            {
+                "name": "animationCreated",
+                "parameters": [
+                    { "name": "player", "$ref": "Animation", "description": "Animation that was created." },
+                    { "name": "resetTimeline", "type": "boolean", "description": "Whether the timeline should be reset." }
+                ],
+                "description": "Event for each animation player that has been created."
+            },
+            {
+                "name": "animationCanceled",
+                "parameters": [
+                    { "name": "id", "type": "string", "description": "Id of the Animation that was cancelled." }
+                ],
+                "description": "Event for Animations in the frontend that have been cancelled."
+            }
+        ]
+    },
+    {
+        "domain": "Accessibility",
+        "hidden": true,
+        "types": [
+            {
+                "id": "AXNodeId",
+                "type": "string",
+                "description": "Unique accessibility node identifier."
+            },
+            {
+                "id": "AXValueType",
+                "type": "string",
+                "enum": [ "boolean", "tristate", "booleanOrUndefined", "idref", "idrefList", "integer", "number", "string", "token", "tokenList", "domRelation", "role", "internalRole" ],
+                "description": "Enum of possible property types."
+            },
+            {
+                "id": "AXPropertySourceType",
+                "type": "string",
+                "enum": [ "attribute", "implicit", "style" ],
+                "description": "Enum of possible property sources."
+            },
+            {
+                "id": "AXPropertySource",
+                "type": "object",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "The name/label of this source." },
+                    { "name": "sourceType", "$ref": "AXPropertySourceType", "description": "What type of source this is." },
+                    { "name": "value", "type": "any", "description": "The value of this property source." },
+                    { "name": "type", "$ref": "AXValueType", "description": "What type the value should be interpreted as." },
+                    { "name": "invalid", "type": "boolean", "description": "Whether the value for this property is invalid.", "optional": true },
+                    { "name": "invalidReason", "type": "string", "description": "Reason for the value being invalid, if it is.", "optional": true }
+                ],
+                "description": "A single source for a computed AX property."
+            },
+            {
+                "id": "AXRelatedNode",
+                "type": "object",
+                "properties": [
+                    { "name": "idref", "type": "string", "description": "The IDRef value provided, if any.", "optional": true },
+                    { "name": "backendNodeId", "$ref": "DOM.BackendNodeId", "description": "The BackendNodeId of the related node." }
+                ]
+            },
+            {
+                "id": "AXProperty",
+                "type": "object",
+                "properties": [
+                    { "name": "name", "type": "string", "description": "The name of this property." },
+                    { "name": "value", "$ref": "AXValue", "description": "The value of this property." }
+                ]
+            },
+            {
+                "id": "AXValue",
+                "type": "object",
+                "properties": [
+                    { "name": "type", "$ref": "AXValueType", "description": "The type of this value." },
+
+                    { "name": "value", "type": "any", "description": "The computed value of this property.", "optional": true },
+                    { "name": "relatedNodeValue", "$ref": "AXRelatedNode", "description": "The related node value, if any.", "optional": true },
+                    { "name": "relatedNodeArrayValue", "type": "array", "items": { "$ref": "AXRelatedNode" }, "description": "Multiple relted nodes, if applicable.", "optional": true },
+                    { "name": "sources", "type": "array", "items": { "$ref": "AXPropertySource" }, "description": "The sources which contributed to the computation of this property.", "optional": true }
+                ],
+                "description": "A single computed AX property."
+            },
+            {
+                "id": "AXGlobalStates",
+                "type": "string",
+                "enum": [ "disabled", "hidden", "hiddenRoot", "invalid" ],
+                "description": "States which apply to every AX node."
+            },
+            {
+                "id": "AXLiveRegionAttributes",
+                "type": "string",
+                "enum": [ "live", "atomic", "relevant", "busy", "root" ],
+                "description": "Attributes which apply to nodes in live regions."
+            },
+            {
+                "id": "AXWidgetAttributes",
+                "type": "string",
+                "enum": [ "autocomplete", "haspopup", "level", "multiselectable", "orientation", "multiline", "readonly", "required", "valuemin", "valuemax", "valuetext" ],
+                "Description": "Attributes which apply to widgets."
+            },
+            {
+                "id": "AXWidgetStates",
+                "type": "string",
+                "enum": [ "checked", "expanded", "pressed", "selected" ],
+                "description": "States which apply to widgets."
+            },
+            {
+                "id": "AXRelationshipAttributes",
+                "type": "string",
+                "enum": [ "activedescendant", "flowto", "controls", "describedby", "labelledby", "owns" ],
+                "description": "Relationships between elements other than parent/child/sibling."
+            },
+            {
+                "id": "AXNode",
+                "type": "object",
+                "properties": [
+                    { "name": "nodeId", "$ref": "AXNodeId", "description": "Unique identifier for this node." },
+                    { "name": "ignored", "type": "boolean", "description": "Whether this node is ignored for accessibility" },
+                    { "name": "ignoredReasons", "type": "array", "items": { "$ref": "AXProperty" }, "description": "Collection of reasons why this node is hidden.", "optional": true },
+                    { "name": "role", "$ref": "AXValue", "description": "This <code>Node</code>'s role, whether explicit or implicit.", "optional": true},
+                    { "name": "name", "$ref": "AXValue", "description": "The accessible name for this <code>Node</code>.", "optional": true },
+                    { "name": "description", "$ref": "AXValue", "description": "The accessible description for this <code>Node</code>.", "optional": true },
+                    { "name": "value", "$ref": "AXValue", "description": "The value for this <code>Node</code>.", "optional": true },
+                    { "name": "help", "$ref": "AXValue", "description": "Help.", "optional": true },
+                    { "name": "properties", "type": "array", "items": { "$ref": "AXProperty" }, "description": "All other properties", "optional": true }
+                ],
+                "description": "A node in the accessibility tree."
+            }
+        ],
+        "commands": [
+            {
+                "name": "getAXNode",
+                "parameters": [
+                    { "name": "nodeId", "$ref": "DOM.NodeId", "description": "ID of node to get accessibility node for." }
+                ],
+                "returns": [
+                    { "name": "accessibilityNode", "$ref": "AXNode", "description": "The <code>Accessibility.AXNode</code> for this DOM node, if it exists.", "optional": true }
+                ],
+                "description": "Fetches the accessibility node for this DOM node, if it exists.",
+                "hidden": true
             }
         ]
     }]
