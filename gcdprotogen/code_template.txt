// AUTO-GENERATED Chrome Remote Debugger Protocol API Client
// This file contains the {{.Domain}} commands.
// API Version: {{.Major}}.{{.Minor}}
{{ $api := . }}
package gcd


import (
	{{ if $api.TypesRequired }}"github.com/wirepair/gcd/gcdprotogen/types"{{ end }}
	{{ if $api.JsonRequired }}"encoding/json"{{ end }}
)

// add this API domain to ChromeTarget
func (c *ChromeTarget) {{.Domain}}() *Chrome{{.Domain}} {
	if c.{{.Domain | ToLower }} == nil {
		c.{{.Domain | ToLower }} = newChrome{{.Domain}}(c)
	}
	return c.{{.Domain | ToLower }}
}


type Chrome{{.Domain}} struct {
	target *ChromeTarget
}

func newChrome{{.Domain}}(target *ChromeTarget) *Chrome{{.Domain}} {
	c := &Chrome{{.Domain}}{target: target}
	return c
}

{{range $element := .NoParamReturnCalls}} 
// {{$element.Description}}
func (c *Chrome{{$api.Domain}}) {{.Method | Title}}() (*ChromeResponse, error) {
	return sendDefaultRequest(c.target.sendCh, &ParamRequest{Id: c.target.getId(), Method: "{{$api.Domain}}.{{.Method}}"})
}
{{ end }}

{{range $element := .ParamCalls}}// {{.Method}} - {{$element.Description}}{{range $paramDescription := .ParamDescriptions}}
// {{$paramDescription}}{{ end }}
func (c *Chrome{{$api.Domain}}) {{.Method | Title}}({{range $param := $element.Params}}{{$param.Name | Reserved}} {{$param.Type}}, {{end}}) (*ChromeResponse, error) {
	paramRequest := make(map[string]interface{}, {{len (.Params) }}){{range $param := $element.Params}}
	paramRequest["{{$param.Name}}"] = {{$param.Name | Reserved}}{{ end }}
	return sendDefaultRequest(c.target.sendCh, &ParamRequest{Id: c.target.getId(), Method: "{{$api.Domain}}.{{.Method}}", Params: paramRequest})
}

{{ end }}

{{range $element := .ReturnCalls}}// {{.Method}} - {{$element.Description}}
// Returns - {{range $returnDescription := .ReturnDescriptions}}
// {{$returnDescription}}{{ end }}
func (c *Chrome{{$api.Domain}}) {{.Method | Title}}() ({{range $rets := .Returns}}{{$rets.Type}}, {{end}}error) {
	recvCh, _ := sendCustomReturn(c.target.sendCh, &ParamRequest{Id: c.target.getId(), Method: "{{$api.Domain}}.{{.Method}}"})
	resp := <-recvCh

	var chromeData struct {
		Result struct { {{range $rets := .Returns}}
			{{$rets.Name | Title | Reserved }} {{$rets.Type}} {{end}}
		}
	}
		
	err := json.Unmarshal(resp.Data, &chromeData)
	if err != nil {
		cerr := &ChromeErrorResponse{}
		chromeError := json.Unmarshal(resp.Data, cerr)
		if chromeError == nil {
			return {{range $rets := .Returns}}{{$rets.Type | NullType}}, {{end}}&ChromeRequestErr{Resp: cerr}
		}
		return {{range $rets := .Returns}}{{$rets.Type | NullType}}, {{end}}err
	}

	return {{range $rets := .Returns}}chromeData.Result.{{$rets.Name | Title | Reserved}}, {{end}}nil
}

{{ end }}

{{range $element := .ParamReturnCalls}}// {{.Method}} - {{$element.Description}}
// Returns - {{range $returnDescription := .ReturnDescriptions}}
// {{$returnDescription}}{{ end }}
func (c *Chrome{{$api.Domain}}) {{.Method | Title}}({{range $param := $element.Params}}{{$param.Name | Reserved}} {{$param.Type}}, {{end}}) ({{range $rets := .Returns}}{{$rets.Type}}, {{end}}error) {
	paramRequest := make(map[string]interface{}, {{len (.Params) }}){{range $param := $element.Params}}
	paramRequest["{{$param.Name}}"] = {{$param.Name | Reserved}}{{ end }}
	recvCh, _ := sendCustomReturn(c.target.sendCh, &ParamRequest{Id: c.target.getId(), Method: "{{$api.Domain}}.{{.Method}}", Params: paramRequest})
	resp := <-recvCh

	var chromeData struct {
		Result struct { {{range $rets := .Returns}}
			{{$rets.Name | Title | Reserved }} {{$rets.Type}} {{end}}
		}
	}
		
	err := json.Unmarshal(resp.Data, &chromeData)
	if err != nil {
		cerr := &ChromeErrorResponse{}
		chromeError := json.Unmarshal(resp.Data, cerr)
		if chromeError == nil {
			return {{range $rets := .Returns}}{{$rets.Type | NullType}}, {{end}}&ChromeRequestErr{Resp: cerr}
		}
		return {{range $rets := .Returns}}{{$rets.Type | NullType}}, {{end}}err
	}

	return {{range $rets := .Returns}}chromeData.Result.{{$rets.Name | Title | Reserved}}, {{end}}nil
}

{{ end }}
